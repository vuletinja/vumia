import { type Readable, type Writable } from 'svelte/store';
import { Clock, Scene, type Camera, type ColorSpace, type ShadowMapType, type ToneMapping, type WebGLRenderer } from 'three';
import type { ThrelteFrameHandler } from '../hooks/useFrame';
import type { ThrelteRenderHandler } from '../hooks/useRender';
import type { DisposableThreeObject, Size } from '../types';
import { type CurrentWritable } from './storeUtils';
/**
 * ### `ThrelteContext`
 *
 * This is the main context of a Threlte application.
 * It's exposed to the user via the hook `useThrelte`.
 */
export type ThrelteContext = {
    size: Readable<Size>;
    clock: Clock;
    camera: CurrentWritable<Camera>;
    scene: Scene;
    dpr: CurrentWritable<number>;
    useLegacyLights: CurrentWritable<boolean>;
    renderer: WebGLRenderer;
    frameloop: CurrentWritable<'always' | 'demand' | 'never'>;
    /**
     * Invalidates the current frame when frameloop === 'demand'
     */
    invalidate: (debugFrameloopMessage?: string) => void;
    /**
     * Advance one frame when frameloop === 'never'
     */
    advance: () => void;
    colorManagementEnabled: CurrentWritable<boolean>;
    colorSpace: CurrentWritable<ColorSpace>;
    toneMapping: CurrentWritable<ToneMapping>;
    shadows: CurrentWritable<boolean | ShadowMapType>;
};
/**
 * The internal context is used to store the state of the
 * frameloop and the disposal methods. It is not exposed
 * to the user.
 */
export type ThrelteInternalContext = {
    /**
     * Render context
     */
    debugFrameloop: boolean;
    frameInvalidated: boolean;
    frame: number;
    invalidations: Record<string, number>;
    manualFrameHandlers: Set<ThrelteFrameHandler>;
    autoFrameHandlers: Set<ThrelteFrameHandler>;
    allFrameHandlers: Set<ThrelteFrameHandler>;
    allFrameHandlersNeedSortCheck: boolean;
    renderHandlers: Set<ThrelteRenderHandler>;
    renderHandlersNeedSortCheck: boolean;
    advance: boolean;
    /**
     * Disposal context
     */
    /**
     * Disposes all disposable objects from disposableObjects
     * that are not mounted anymore and clears the Map entry.
     */
    dispose: (force?: boolean) => void;
    /**
     * Returns an array of disposable objects.
     * Recursively checks disposable objects for properties
     * that again hold disposable objects and returns
     * them as well.
     */
    collectDisposableObjects: (object?: DisposableThreeObject, arr?: DisposableThreeObject[]) => DisposableThreeObject[];
    /**
     * Add disposable objects that will be disposed on unmounting.
     */
    addDisposableObjects: (objects: DisposableThreeObject[]) => void;
    /**
     * Remove disposable objects and possibly dispose them
     * in the next frame if they are not mounted anywhere else.
     */
    removeDisposableObjects: (objects: DisposableThreeObject[]) => void;
    /**
     * A map of currently mounted disposable objects.
     */
    disposableObjects: Map<DisposableThreeObject, number>;
    /**
     * A flag that is used to check whether the dispose method
     * should actually run.
     */
    shouldDispose: boolean;
};
export type ThrelteUserContext = CurrentWritable<Record<string, any>>;
/**
 * ### `createContexts`
 *
 * This function creates the context objects `ThrelteContext` and
 * `ThrelteInternalContext` for a Threlte application.
 */
export declare const createContexts: (options: {
    colorSpace: ColorSpace;
    toneMapping: ToneMapping;
    dpr: number;
    userSize: Writable<Size | undefined>;
    parentSize: Writable<Size>;
    debugFrameloop: boolean;
    frameloop: 'always' | 'demand' | 'never';
    shadows: boolean | ShadowMapType;
    colorManagementEnabled: boolean;
    useLegacyLights: boolean;
}) => {
    ctx: ThrelteContext;
    internalCtx: ThrelteInternalContext;
    getCtx: () => ThrelteContext;
    getInternalCtx: () => ThrelteInternalContext;
};
