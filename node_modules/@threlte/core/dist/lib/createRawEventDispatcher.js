import { get_current_component } from 'svelte/internal';
/**
 * ### `createRawEventDispatcher`
 *
 * This event dispatcher creates raw events unlike Svelte's own event dispatcher
 * which nests the data in a detail object (`CustomEvent<Payload>`). This is not
 * nesessary for a lot of Threlte use cases and makes it harder to work with the payload.
 *
 * @example
 *
 * ComponentA.svelte:
 * ```svelte
 * <script>
 * 	const dispatch = createRawEventDispatcher<{ foo: string }>()
 * 	dispatch('foo', 'bar')
 * </script>
 * ```
 *
 * ComponentB.svelte:
 * ```svelte
 * <ComponentA on:foo={(e) => console.log(e)} /> <!-- 'bar' -->
 * ```
 */
export const createRawEventDispatcher = () => {
    const component = get_current_component();
    const dispatchRawEvent = (type, value) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            callbacks.forEach((fn) => {
                fn(value);
            });
        }
    };
    const hasEventListener = (type) => {
        return Boolean(component.$$.callbacks[type]);
    };
    Object.defineProperty(dispatchRawEvent, 'hasEventListener', {
        value: hasEventListener,
        enumerable: true
    });
    return dispatchRawEvent;
};
