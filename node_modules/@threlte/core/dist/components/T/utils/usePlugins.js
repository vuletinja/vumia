import { getContext, onDestroy } from 'svelte';
export const usePlugins = (params) => {
    const pluginContextName = 'threlte-plugin-context';
    const plugins = getContext(pluginContextName);
    if (!plugins)
        return;
    const pluginsReturns = Object.values(plugins)
        .map((plugin) => plugin(params))
        .filter(Boolean);
    const pluginsProps = pluginsReturns.flatMap((callback) => callback.pluginProps ?? []);
    let refCleanupCallbacks = [];
    onDestroy(() => {
        refCleanupCallbacks.forEach((callback) => callback());
    });
    const updateRef = (ref) => {
        refCleanupCallbacks.forEach((callback) => callback());
        refCleanupCallbacks = [];
        pluginsReturns.forEach((callback) => {
            const cleanupCallback = callback.onRefChange?.(ref);
            if (cleanupCallback) {
                refCleanupCallbacks.push(cleanupCallback);
            }
        });
    };
    const updateProps = (props) => {
        pluginsReturns.forEach((callback) => {
            callback.onPropsChange?.(props);
        });
    };
    const updateRestProps = (restProps) => {
        pluginsReturns.forEach((callback) => {
            callback.onRestPropsChange?.(restProps);
        });
    };
    return {
        updateRef,
        updateProps,
        updateRestProps,
        pluginsProps
    };
};
