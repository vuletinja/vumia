import type { ComponentConstructorOptions, SvelteComponent } from 'svelte';
import * as THREE from 'three';
import TComp from './T.svelte';
import type { Events, Props, Slots } from './types';
type Extensions = Record<string, any>;
/**
 * Extends the default THREE namespace and allows using custom Three.js objects with `<T>`.
 *
 * @example
 * ```svelte
 * <script>
 * 	import { extend, T } from 'threlte'
 * 	import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
 *
 * 	extend({ OrbitControls })
 * </script>
 *
 * <T.OrbitControls />
 * ```
 */
export declare const extend: (extensions: Extensions) => void;
/**
 * ## `<T>`
 *
 * Threlte's `<T>` component is a wrapper around Three.js objects. It is a generic component that can be used to create any Three.js object.
 *
 * @example
 *
 * ```svelte
 * <script>
 * 	import { T } from 'threlte'
 * </script>
 *
 * <T.PerspectiveCamera makeDefault />
 *
 * <T.Mesh>
 * 	<T.BoxGeometry />
 * 	<T.MeshBasicMaterial color="red" />
 * </T.Mesh>
 * ```
 */
export declare const T: typeof TComp & {
    AnimationUtils: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.AnimationUtils>>): SvelteComponent<Props<typeof THREE.AnimationUtils>, Events<typeof THREE.AnimationUtils>, Slots<typeof THREE.AnimationUtils>>;
    };
    DataUtils: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.DataUtils>>): SvelteComponent<Props<typeof THREE.DataUtils>, Events<typeof THREE.DataUtils>, Slots<typeof THREE.DataUtils>>;
    };
    ColorManagement: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ColorManagement>>): SvelteComponent<Props<typeof THREE.ColorManagement>, Events<typeof THREE.ColorManagement>, Slots<typeof THREE.ColorManagement>>;
    };
    MathUtils: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.MathUtils>>): SvelteComponent<Props<typeof THREE.MathUtils>, Events<typeof THREE.MathUtils>, Slots<typeof THREE.MathUtils>>;
    };
    WebGLUtils: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLUtils>>): SvelteComponent<Props<typeof THREE.WebGLUtils>, Events<typeof THREE.WebGLUtils>, Slots<typeof THREE.WebGLUtils>>;
    };
    readonly REVISION: {
        new (options: ComponentConstructorOptions<Props<string>>): SvelteComponent<Props<string>, Events<string>, Slots<string>>;
    };
    MOUSE: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.MOUSE>>): SvelteComponent<Props<typeof THREE.MOUSE>, Events<typeof THREE.MOUSE>, Slots<typeof THREE.MOUSE>>;
    };
    TOUCH: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.TOUCH>>): SvelteComponent<Props<typeof THREE.TOUCH>, Events<typeof THREE.TOUCH>, Slots<typeof THREE.TOUCH>>;
    };
    readonly CullFaceNone: {
        new (options: ComponentConstructorOptions<Props<0>>): SvelteComponent<Props<0>, Events<0>, Slots<0>>;
    };
    readonly CullFaceBack: {
        new (options: ComponentConstructorOptions<Props<1>>): SvelteComponent<Props<1>, Events<1>, Slots<1>>;
    };
    readonly CullFaceFront: {
        new (options: ComponentConstructorOptions<Props<2>>): SvelteComponent<Props<2>, Events<2>, Slots<2>>;
    };
    readonly CullFaceFrontBack: {
        new (options: ComponentConstructorOptions<Props<3>>): SvelteComponent<Props<3>, Events<3>, Slots<3>>;
    };
    readonly BasicShadowMap: {
        new (options: ComponentConstructorOptions<Props<0>>): SvelteComponent<Props<0>, Events<0>, Slots<0>>;
    };
    readonly PCFShadowMap: {
        new (options: ComponentConstructorOptions<Props<1>>): SvelteComponent<Props<1>, Events<1>, Slots<1>>;
    };
    readonly PCFSoftShadowMap: {
        new (options: ComponentConstructorOptions<Props<2>>): SvelteComponent<Props<2>, Events<2>, Slots<2>>;
    };
    readonly VSMShadowMap: {
        new (options: ComponentConstructorOptions<Props<3>>): SvelteComponent<Props<3>, Events<3>, Slots<3>>;
    };
    readonly FrontSide: {
        new (options: ComponentConstructorOptions<Props<0>>): SvelteComponent<Props<0>, Events<0>, Slots<0>>;
    };
    readonly BackSide: {
        new (options: ComponentConstructorOptions<Props<1>>): SvelteComponent<Props<1>, Events<1>, Slots<1>>;
    };
    readonly DoubleSide: {
        new (options: ComponentConstructorOptions<Props<2>>): SvelteComponent<Props<2>, Events<2>, Slots<2>>;
    };
    readonly TwoPassDoubleSide: {
        new (options: ComponentConstructorOptions<Props<2>>): SvelteComponent<Props<2>, Events<2>, Slots<2>>;
    };
    readonly NoBlending: {
        new (options: ComponentConstructorOptions<Props<0>>): SvelteComponent<Props<0>, Events<0>, Slots<0>>;
    };
    readonly NormalBlending: {
        new (options: ComponentConstructorOptions<Props<1>>): SvelteComponent<Props<1>, Events<1>, Slots<1>>;
    };
    readonly AdditiveBlending: {
        new (options: ComponentConstructorOptions<Props<2>>): SvelteComponent<Props<2>, Events<2>, Slots<2>>;
    };
    readonly SubtractiveBlending: {
        new (options: ComponentConstructorOptions<Props<3>>): SvelteComponent<Props<3>, Events<3>, Slots<3>>;
    };
    readonly MultiplyBlending: {
        new (options: ComponentConstructorOptions<Props<4>>): SvelteComponent<Props<4>, Events<4>, Slots<4>>;
    };
    readonly CustomBlending: {
        new (options: ComponentConstructorOptions<Props<5>>): SvelteComponent<Props<5>, Events<5>, Slots<5>>;
    };
    readonly AddEquation: {
        new (options: ComponentConstructorOptions<Props<100>>): SvelteComponent<Props<100>, Events<100>, Slots<100>>;
    };
    readonly SubtractEquation: {
        new (options: ComponentConstructorOptions<Props<101>>): SvelteComponent<Props<101>, Events<101>, Slots<101>>;
    };
    readonly ReverseSubtractEquation: {
        new (options: ComponentConstructorOptions<Props<102>>): SvelteComponent<Props<102>, Events<102>, Slots<102>>;
    };
    readonly MinEquation: {
        new (options: ComponentConstructorOptions<Props<103>>): SvelteComponent<Props<103>, Events<103>, Slots<103>>;
    };
    readonly MaxEquation: {
        new (options: ComponentConstructorOptions<Props<104>>): SvelteComponent<Props<104>, Events<104>, Slots<104>>;
    };
    readonly ZeroFactor: {
        new (options: ComponentConstructorOptions<Props<200>>): SvelteComponent<Props<200>, Events<200>, Slots<200>>;
    };
    readonly OneFactor: {
        new (options: ComponentConstructorOptions<Props<201>>): SvelteComponent<Props<201>, Events<201>, Slots<201>>;
    };
    readonly SrcColorFactor: {
        new (options: ComponentConstructorOptions<Props<202>>): SvelteComponent<Props<202>, Events<202>, Slots<202>>;
    };
    readonly OneMinusSrcColorFactor: {
        new (options: ComponentConstructorOptions<Props<203>>): SvelteComponent<Props<203>, Events<203>, Slots<203>>;
    };
    readonly SrcAlphaFactor: {
        new (options: ComponentConstructorOptions<Props<204>>): SvelteComponent<Props<204>, Events<204>, Slots<204>>;
    };
    readonly OneMinusSrcAlphaFactor: {
        new (options: ComponentConstructorOptions<Props<205>>): SvelteComponent<Props<205>, Events<205>, Slots<205>>;
    };
    readonly DstAlphaFactor: {
        new (options: ComponentConstructorOptions<Props<206>>): SvelteComponent<Props<206>, Events<206>, Slots<206>>;
    };
    readonly OneMinusDstAlphaFactor: {
        new (options: ComponentConstructorOptions<Props<207>>): SvelteComponent<Props<207>, Events<207>, Slots<207>>;
    };
    readonly DstColorFactor: {
        new (options: ComponentConstructorOptions<Props<208>>): SvelteComponent<Props<208>, Events<208>, Slots<208>>;
    };
    readonly OneMinusDstColorFactor: {
        new (options: ComponentConstructorOptions<Props<209>>): SvelteComponent<Props<209>, Events<209>, Slots<209>>;
    };
    readonly SrcAlphaSaturateFactor: {
        new (options: ComponentConstructorOptions<Props<210>>): SvelteComponent<Props<210>, Events<210>, Slots<210>>;
    };
    readonly NeverDepth: {
        new (options: ComponentConstructorOptions<Props<0>>): SvelteComponent<Props<0>, Events<0>, Slots<0>>;
    };
    readonly AlwaysDepth: {
        new (options: ComponentConstructorOptions<Props<1>>): SvelteComponent<Props<1>, Events<1>, Slots<1>>;
    };
    readonly LessDepth: {
        new (options: ComponentConstructorOptions<Props<2>>): SvelteComponent<Props<2>, Events<2>, Slots<2>>;
    };
    readonly LessEqualDepth: {
        new (options: ComponentConstructorOptions<Props<3>>): SvelteComponent<Props<3>, Events<3>, Slots<3>>;
    };
    readonly EqualDepth: {
        new (options: ComponentConstructorOptions<Props<4>>): SvelteComponent<Props<4>, Events<4>, Slots<4>>;
    };
    readonly GreaterEqualDepth: {
        new (options: ComponentConstructorOptions<Props<5>>): SvelteComponent<Props<5>, Events<5>, Slots<5>>;
    };
    readonly GreaterDepth: {
        new (options: ComponentConstructorOptions<Props<6>>): SvelteComponent<Props<6>, Events<6>, Slots<6>>;
    };
    readonly NotEqualDepth: {
        new (options: ComponentConstructorOptions<Props<7>>): SvelteComponent<Props<7>, Events<7>, Slots<7>>;
    };
    readonly MultiplyOperation: {
        new (options: ComponentConstructorOptions<Props<0>>): SvelteComponent<Props<0>, Events<0>, Slots<0>>;
    };
    readonly MixOperation: {
        new (options: ComponentConstructorOptions<Props<1>>): SvelteComponent<Props<1>, Events<1>, Slots<1>>;
    };
    readonly AddOperation: {
        new (options: ComponentConstructorOptions<Props<2>>): SvelteComponent<Props<2>, Events<2>, Slots<2>>;
    };
    readonly NoToneMapping: {
        new (options: ComponentConstructorOptions<Props<0>>): SvelteComponent<Props<0>, Events<0>, Slots<0>>;
    };
    readonly LinearToneMapping: {
        new (options: ComponentConstructorOptions<Props<1>>): SvelteComponent<Props<1>, Events<1>, Slots<1>>;
    };
    readonly ReinhardToneMapping: {
        new (options: ComponentConstructorOptions<Props<2>>): SvelteComponent<Props<2>, Events<2>, Slots<2>>;
    };
    readonly CineonToneMapping: {
        new (options: ComponentConstructorOptions<Props<3>>): SvelteComponent<Props<3>, Events<3>, Slots<3>>;
    };
    readonly ACESFilmicToneMapping: {
        new (options: ComponentConstructorOptions<Props<4>>): SvelteComponent<Props<4>, Events<4>, Slots<4>>;
    };
    readonly CustomToneMapping: {
        new (options: ComponentConstructorOptions<Props<5>>): SvelteComponent<Props<5>, Events<5>, Slots<5>>;
    };
    readonly UVMapping: {
        new (options: ComponentConstructorOptions<Props<300>>): SvelteComponent<Props<300>, Events<300>, Slots<300>>;
    };
    readonly CubeReflectionMapping: {
        new (options: ComponentConstructorOptions<Props<301>>): SvelteComponent<Props<301>, Events<301>, Slots<301>>;
    };
    readonly CubeRefractionMapping: {
        new (options: ComponentConstructorOptions<Props<302>>): SvelteComponent<Props<302>, Events<302>, Slots<302>>;
    };
    readonly CubeUVReflectionMapping: {
        new (options: ComponentConstructorOptions<Props<306>>): SvelteComponent<Props<306>, Events<306>, Slots<306>>;
    };
    readonly EquirectangularReflectionMapping: {
        new (options: ComponentConstructorOptions<Props<303>>): SvelteComponent<Props<303>, Events<303>, Slots<303>>;
    };
    readonly EquirectangularRefractionMapping: {
        new (options: ComponentConstructorOptions<Props<304>>): SvelteComponent<Props<304>, Events<304>, Slots<304>>;
    };
    readonly RepeatWrapping: {
        new (options: ComponentConstructorOptions<Props<1000>>): SvelteComponent<Props<1000>, Events<1000>, Slots<1000>>;
    };
    readonly ClampToEdgeWrapping: {
        new (options: ComponentConstructorOptions<Props<1001>>): SvelteComponent<Props<1001>, Events<1001>, Slots<1001>>;
    };
    readonly MirroredRepeatWrapping: {
        new (options: ComponentConstructorOptions<Props<1002>>): SvelteComponent<Props<1002>, Events<1002>, Slots<1002>>;
    };
    readonly NearestFilter: {
        new (options: ComponentConstructorOptions<Props<1003>>): SvelteComponent<Props<1003>, Events<1003>, Slots<1003>>;
    };
    readonly NearestMipmapNearestFilter: {
        new (options: ComponentConstructorOptions<Props<1004>>): SvelteComponent<Props<1004>, Events<1004>, Slots<1004>>;
    };
    readonly NearestMipMapNearestFilter: {
        new (options: ComponentConstructorOptions<Props<1004>>): SvelteComponent<Props<1004>, Events<1004>, Slots<1004>>;
    };
    readonly NearestMipmapLinearFilter: {
        new (options: ComponentConstructorOptions<Props<1005>>): SvelteComponent<Props<1005>, Events<1005>, Slots<1005>>;
    };
    readonly NearestMipMapLinearFilter: {
        new (options: ComponentConstructorOptions<Props<1005>>): SvelteComponent<Props<1005>, Events<1005>, Slots<1005>>;
    };
    readonly LinearFilter: {
        new (options: ComponentConstructorOptions<Props<1006>>): SvelteComponent<Props<1006>, Events<1006>, Slots<1006>>;
    };
    readonly LinearMipmapNearestFilter: {
        new (options: ComponentConstructorOptions<Props<1007>>): SvelteComponent<Props<1007>, Events<1007>, Slots<1007>>;
    };
    readonly LinearMipMapNearestFilter: {
        new (options: ComponentConstructorOptions<Props<1007>>): SvelteComponent<Props<1007>, Events<1007>, Slots<1007>>;
    };
    readonly LinearMipmapLinearFilter: {
        new (options: ComponentConstructorOptions<Props<1008>>): SvelteComponent<Props<1008>, Events<1008>, Slots<1008>>;
    };
    readonly LinearMipMapLinearFilter: {
        new (options: ComponentConstructorOptions<Props<1008>>): SvelteComponent<Props<1008>, Events<1008>, Slots<1008>>;
    };
    readonly UnsignedByteType: {
        new (options: ComponentConstructorOptions<Props<1009>>): SvelteComponent<Props<1009>, Events<1009>, Slots<1009>>;
    };
    readonly ByteType: {
        new (options: ComponentConstructorOptions<Props<1010>>): SvelteComponent<Props<1010>, Events<1010>, Slots<1010>>;
    };
    readonly ShortType: {
        new (options: ComponentConstructorOptions<Props<1011>>): SvelteComponent<Props<1011>, Events<1011>, Slots<1011>>;
    };
    readonly UnsignedShortType: {
        new (options: ComponentConstructorOptions<Props<1012>>): SvelteComponent<Props<1012>, Events<1012>, Slots<1012>>;
    };
    readonly IntType: {
        new (options: ComponentConstructorOptions<Props<1013>>): SvelteComponent<Props<1013>, Events<1013>, Slots<1013>>;
    };
    readonly UnsignedIntType: {
        new (options: ComponentConstructorOptions<Props<1014>>): SvelteComponent<Props<1014>, Events<1014>, Slots<1014>>;
    };
    readonly FloatType: {
        new (options: ComponentConstructorOptions<Props<1015>>): SvelteComponent<Props<1015>, Events<1015>, Slots<1015>>;
    };
    readonly HalfFloatType: {
        new (options: ComponentConstructorOptions<Props<1016>>): SvelteComponent<Props<1016>, Events<1016>, Slots<1016>>;
    };
    readonly UnsignedShort4444Type: {
        new (options: ComponentConstructorOptions<Props<1017>>): SvelteComponent<Props<1017>, Events<1017>, Slots<1017>>;
    };
    readonly UnsignedShort5551Type: {
        new (options: ComponentConstructorOptions<Props<1018>>): SvelteComponent<Props<1018>, Events<1018>, Slots<1018>>;
    };
    readonly UnsignedInt248Type: {
        new (options: ComponentConstructorOptions<Props<1020>>): SvelteComponent<Props<1020>, Events<1020>, Slots<1020>>;
    };
    readonly AlphaFormat: {
        new (options: ComponentConstructorOptions<Props<1021>>): SvelteComponent<Props<1021>, Events<1021>, Slots<1021>>;
    };
    readonly RGBAFormat: {
        new (options: ComponentConstructorOptions<Props<1023>>): SvelteComponent<Props<1023>, Events<1023>, Slots<1023>>;
    };
    readonly LuminanceFormat: {
        new (options: ComponentConstructorOptions<Props<1024>>): SvelteComponent<Props<1024>, Events<1024>, Slots<1024>>;
    };
    readonly LuminanceAlphaFormat: {
        new (options: ComponentConstructorOptions<Props<1025>>): SvelteComponent<Props<1025>, Events<1025>, Slots<1025>>;
    };
    readonly DepthFormat: {
        new (options: ComponentConstructorOptions<Props<1026>>): SvelteComponent<Props<1026>, Events<1026>, Slots<1026>>;
    };
    readonly DepthStencilFormat: {
        new (options: ComponentConstructorOptions<Props<1027>>): SvelteComponent<Props<1027>, Events<1027>, Slots<1027>>;
    };
    readonly RedFormat: {
        new (options: ComponentConstructorOptions<Props<1028>>): SvelteComponent<Props<1028>, Events<1028>, Slots<1028>>;
    };
    readonly RedIntegerFormat: {
        new (options: ComponentConstructorOptions<Props<1029>>): SvelteComponent<Props<1029>, Events<1029>, Slots<1029>>;
    };
    readonly RGFormat: {
        new (options: ComponentConstructorOptions<Props<1030>>): SvelteComponent<Props<1030>, Events<1030>, Slots<1030>>;
    };
    readonly RGIntegerFormat: {
        new (options: ComponentConstructorOptions<Props<1031>>): SvelteComponent<Props<1031>, Events<1031>, Slots<1031>>;
    };
    readonly RGBAIntegerFormat: {
        new (options: ComponentConstructorOptions<Props<1033>>): SvelteComponent<Props<1033>, Events<1033>, Slots<1033>>;
    };
    readonly _SRGBAFormat: {
        new (options: ComponentConstructorOptions<Props<1035>>): SvelteComponent<Props<1035>, Events<1035>, Slots<1035>>;
    };
    readonly RGB_S3TC_DXT1_Format: {
        new (options: ComponentConstructorOptions<Props<33776>>): SvelteComponent<Props<33776>, Events<33776>, Slots<33776>>;
    };
    readonly RGBA_S3TC_DXT1_Format: {
        new (options: ComponentConstructorOptions<Props<33777>>): SvelteComponent<Props<33777>, Events<33777>, Slots<33777>>;
    };
    readonly RGBA_S3TC_DXT3_Format: {
        new (options: ComponentConstructorOptions<Props<33778>>): SvelteComponent<Props<33778>, Events<33778>, Slots<33778>>;
    };
    readonly RGBA_S3TC_DXT5_Format: {
        new (options: ComponentConstructorOptions<Props<33779>>): SvelteComponent<Props<33779>, Events<33779>, Slots<33779>>;
    };
    readonly RGB_PVRTC_4BPPV1_Format: {
        new (options: ComponentConstructorOptions<Props<35840>>): SvelteComponent<Props<35840>, Events<35840>, Slots<35840>>;
    };
    readonly RGB_PVRTC_2BPPV1_Format: {
        new (options: ComponentConstructorOptions<Props<35841>>): SvelteComponent<Props<35841>, Events<35841>, Slots<35841>>;
    };
    readonly RGBA_PVRTC_4BPPV1_Format: {
        new (options: ComponentConstructorOptions<Props<35842>>): SvelteComponent<Props<35842>, Events<35842>, Slots<35842>>;
    };
    readonly RGBA_PVRTC_2BPPV1_Format: {
        new (options: ComponentConstructorOptions<Props<35843>>): SvelteComponent<Props<35843>, Events<35843>, Slots<35843>>;
    };
    readonly RGB_ETC1_Format: {
        new (options: ComponentConstructorOptions<Props<36196>>): SvelteComponent<Props<36196>, Events<36196>, Slots<36196>>;
    };
    readonly RGB_ETC2_Format: {
        new (options: ComponentConstructorOptions<Props<37492>>): SvelteComponent<Props<37492>, Events<37492>, Slots<37492>>;
    };
    readonly RGBA_ETC2_EAC_Format: {
        new (options: ComponentConstructorOptions<Props<37496>>): SvelteComponent<Props<37496>, Events<37496>, Slots<37496>>;
    };
    readonly RGBA_ASTC_4x4_Format: {
        new (options: ComponentConstructorOptions<Props<37808>>): SvelteComponent<Props<37808>, Events<37808>, Slots<37808>>;
    };
    readonly RGBA_ASTC_5x4_Format: {
        new (options: ComponentConstructorOptions<Props<37809>>): SvelteComponent<Props<37809>, Events<37809>, Slots<37809>>;
    };
    readonly RGBA_ASTC_5x5_Format: {
        new (options: ComponentConstructorOptions<Props<37810>>): SvelteComponent<Props<37810>, Events<37810>, Slots<37810>>;
    };
    readonly RGBA_ASTC_6x5_Format: {
        new (options: ComponentConstructorOptions<Props<37811>>): SvelteComponent<Props<37811>, Events<37811>, Slots<37811>>;
    };
    readonly RGBA_ASTC_6x6_Format: {
        new (options: ComponentConstructorOptions<Props<37812>>): SvelteComponent<Props<37812>, Events<37812>, Slots<37812>>;
    };
    readonly RGBA_ASTC_8x5_Format: {
        new (options: ComponentConstructorOptions<Props<37813>>): SvelteComponent<Props<37813>, Events<37813>, Slots<37813>>;
    };
    readonly RGBA_ASTC_8x6_Format: {
        new (options: ComponentConstructorOptions<Props<37814>>): SvelteComponent<Props<37814>, Events<37814>, Slots<37814>>;
    };
    readonly RGBA_ASTC_8x8_Format: {
        new (options: ComponentConstructorOptions<Props<37815>>): SvelteComponent<Props<37815>, Events<37815>, Slots<37815>>;
    };
    readonly RGBA_ASTC_10x5_Format: {
        new (options: ComponentConstructorOptions<Props<37816>>): SvelteComponent<Props<37816>, Events<37816>, Slots<37816>>;
    };
    readonly RGBA_ASTC_10x6_Format: {
        new (options: ComponentConstructorOptions<Props<37817>>): SvelteComponent<Props<37817>, Events<37817>, Slots<37817>>;
    };
    readonly RGBA_ASTC_10x8_Format: {
        new (options: ComponentConstructorOptions<Props<37818>>): SvelteComponent<Props<37818>, Events<37818>, Slots<37818>>;
    };
    readonly RGBA_ASTC_10x10_Format: {
        new (options: ComponentConstructorOptions<Props<37819>>): SvelteComponent<Props<37819>, Events<37819>, Slots<37819>>;
    };
    readonly RGBA_ASTC_12x10_Format: {
        new (options: ComponentConstructorOptions<Props<37820>>): SvelteComponent<Props<37820>, Events<37820>, Slots<37820>>;
    };
    readonly RGBA_ASTC_12x12_Format: {
        new (options: ComponentConstructorOptions<Props<37821>>): SvelteComponent<Props<37821>, Events<37821>, Slots<37821>>;
    };
    readonly RGBA_BPTC_Format: {
        new (options: ComponentConstructorOptions<Props<36492>>): SvelteComponent<Props<36492>, Events<36492>, Slots<36492>>;
    };
    readonly RED_RGTC1_Format: {
        new (options: ComponentConstructorOptions<Props<36283>>): SvelteComponent<Props<36283>, Events<36283>, Slots<36283>>;
    };
    readonly SIGNED_RED_RGTC1_Format: {
        new (options: ComponentConstructorOptions<Props<36284>>): SvelteComponent<Props<36284>, Events<36284>, Slots<36284>>;
    };
    readonly RED_GREEN_RGTC2_Format: {
        new (options: ComponentConstructorOptions<Props<36285>>): SvelteComponent<Props<36285>, Events<36285>, Slots<36285>>;
    };
    readonly SIGNED_RED_GREEN_RGTC2_Format: {
        new (options: ComponentConstructorOptions<Props<36286>>): SvelteComponent<Props<36286>, Events<36286>, Slots<36286>>;
    };
    readonly LoopOnce: {
        new (options: ComponentConstructorOptions<Props<2200>>): SvelteComponent<Props<2200>, Events<2200>, Slots<2200>>;
    };
    readonly LoopRepeat: {
        new (options: ComponentConstructorOptions<Props<2201>>): SvelteComponent<Props<2201>, Events<2201>, Slots<2201>>;
    };
    readonly LoopPingPong: {
        new (options: ComponentConstructorOptions<Props<2202>>): SvelteComponent<Props<2202>, Events<2202>, Slots<2202>>;
    };
    readonly InterpolateDiscrete: {
        new (options: ComponentConstructorOptions<Props<2300>>): SvelteComponent<Props<2300>, Events<2300>, Slots<2300>>;
    };
    readonly InterpolateLinear: {
        new (options: ComponentConstructorOptions<Props<2301>>): SvelteComponent<Props<2301>, Events<2301>, Slots<2301>>;
    };
    readonly InterpolateSmooth: {
        new (options: ComponentConstructorOptions<Props<2302>>): SvelteComponent<Props<2302>, Events<2302>, Slots<2302>>;
    };
    readonly ZeroCurvatureEnding: {
        new (options: ComponentConstructorOptions<Props<2400>>): SvelteComponent<Props<2400>, Events<2400>, Slots<2400>>;
    };
    readonly ZeroSlopeEnding: {
        new (options: ComponentConstructorOptions<Props<2401>>): SvelteComponent<Props<2401>, Events<2401>, Slots<2401>>;
    };
    readonly WrapAroundEnding: {
        new (options: ComponentConstructorOptions<Props<2402>>): SvelteComponent<Props<2402>, Events<2402>, Slots<2402>>;
    };
    readonly NormalAnimationBlendMode: {
        new (options: ComponentConstructorOptions<Props<2500>>): SvelteComponent<Props<2500>, Events<2500>, Slots<2500>>;
    };
    readonly AdditiveAnimationBlendMode: {
        new (options: ComponentConstructorOptions<Props<2501>>): SvelteComponent<Props<2501>, Events<2501>, Slots<2501>>;
    };
    readonly TrianglesDrawMode: {
        new (options: ComponentConstructorOptions<Props<0>>): SvelteComponent<Props<0>, Events<0>, Slots<0>>;
    };
    readonly TriangleStripDrawMode: {
        new (options: ComponentConstructorOptions<Props<1>>): SvelteComponent<Props<1>, Events<1>, Slots<1>>;
    };
    readonly TriangleFanDrawMode: {
        new (options: ComponentConstructorOptions<Props<2>>): SvelteComponent<Props<2>, Events<2>, Slots<2>>;
    };
    readonly LinearEncoding: {
        new (options: ComponentConstructorOptions<Props<3000>>): SvelteComponent<Props<3000>, Events<3000>, Slots<3000>>;
    };
    readonly sRGBEncoding: {
        new (options: ComponentConstructorOptions<Props<3001>>): SvelteComponent<Props<3001>, Events<3001>, Slots<3001>>;
    };
    readonly BasicDepthPacking: {
        new (options: ComponentConstructorOptions<Props<3200>>): SvelteComponent<Props<3200>, Events<3200>, Slots<3200>>;
    };
    readonly RGBADepthPacking: {
        new (options: ComponentConstructorOptions<Props<3201>>): SvelteComponent<Props<3201>, Events<3201>, Slots<3201>>;
    };
    readonly TangentSpaceNormalMap: {
        new (options: ComponentConstructorOptions<Props<0>>): SvelteComponent<Props<0>, Events<0>, Slots<0>>;
    };
    readonly ObjectSpaceNormalMap: {
        new (options: ComponentConstructorOptions<Props<1>>): SvelteComponent<Props<1>, Events<1>, Slots<1>>;
    };
    readonly NoColorSpace: {
        new (options: ComponentConstructorOptions<Props<"">>): SvelteComponent<Props<"">, Events<"">, Slots<"">>;
    };
    readonly SRGBColorSpace: {
        new (options: ComponentConstructorOptions<Props<"srgb">>): SvelteComponent<Props<"srgb">, Events<"srgb">, Slots<"srgb">>;
    };
    readonly LinearSRGBColorSpace: {
        new (options: ComponentConstructorOptions<Props<"srgb-linear">>): SvelteComponent<Props<"srgb-linear">, Events<"srgb-linear">, Slots<"srgb-linear">>;
    };
    readonly DisplayP3ColorSpace: {
        new (options: ComponentConstructorOptions<Props<"display-p3">>): SvelteComponent<Props<"display-p3">, Events<"display-p3">, Slots<"display-p3">>;
    };
    readonly ZeroStencilOp: {
        new (options: ComponentConstructorOptions<Props<0>>): SvelteComponent<Props<0>, Events<0>, Slots<0>>;
    };
    readonly KeepStencilOp: {
        new (options: ComponentConstructorOptions<Props<7680>>): SvelteComponent<Props<7680>, Events<7680>, Slots<7680>>;
    };
    readonly ReplaceStencilOp: {
        new (options: ComponentConstructorOptions<Props<7681>>): SvelteComponent<Props<7681>, Events<7681>, Slots<7681>>;
    };
    readonly IncrementStencilOp: {
        new (options: ComponentConstructorOptions<Props<7682>>): SvelteComponent<Props<7682>, Events<7682>, Slots<7682>>;
    };
    readonly DecrementStencilOp: {
        new (options: ComponentConstructorOptions<Props<7283>>): SvelteComponent<Props<7283>, Events<7283>, Slots<7283>>;
    };
    readonly IncrementWrapStencilOp: {
        new (options: ComponentConstructorOptions<Props<34055>>): SvelteComponent<Props<34055>, Events<34055>, Slots<34055>>;
    };
    readonly DecrementWrapStencilOp: {
        new (options: ComponentConstructorOptions<Props<34056>>): SvelteComponent<Props<34056>, Events<34056>, Slots<34056>>;
    };
    readonly InvertStencilOp: {
        new (options: ComponentConstructorOptions<Props<5386>>): SvelteComponent<Props<5386>, Events<5386>, Slots<5386>>;
    };
    readonly NeverStencilFunc: {
        new (options: ComponentConstructorOptions<Props<512>>): SvelteComponent<Props<512>, Events<512>, Slots<512>>;
    };
    readonly LessStencilFunc: {
        new (options: ComponentConstructorOptions<Props<513>>): SvelteComponent<Props<513>, Events<513>, Slots<513>>;
    };
    readonly EqualStencilFunc: {
        new (options: ComponentConstructorOptions<Props<514>>): SvelteComponent<Props<514>, Events<514>, Slots<514>>;
    };
    readonly LessEqualStencilFunc: {
        new (options: ComponentConstructorOptions<Props<515>>): SvelteComponent<Props<515>, Events<515>, Slots<515>>;
    };
    readonly GreaterStencilFunc: {
        new (options: ComponentConstructorOptions<Props<516>>): SvelteComponent<Props<516>, Events<516>, Slots<516>>;
    };
    readonly NotEqualStencilFunc: {
        new (options: ComponentConstructorOptions<Props<517>>): SvelteComponent<Props<517>, Events<517>, Slots<517>>;
    };
    readonly GreaterEqualStencilFunc: {
        new (options: ComponentConstructorOptions<Props<518>>): SvelteComponent<Props<518>, Events<518>, Slots<518>>;
    };
    readonly AlwaysStencilFunc: {
        new (options: ComponentConstructorOptions<Props<519>>): SvelteComponent<Props<519>, Events<519>, Slots<519>>;
    };
    readonly NeverCompare: {
        new (options: ComponentConstructorOptions<Props<512>>): SvelteComponent<Props<512>, Events<512>, Slots<512>>;
    };
    readonly LessCompare: {
        new (options: ComponentConstructorOptions<Props<513>>): SvelteComponent<Props<513>, Events<513>, Slots<513>>;
    };
    readonly EqualCompare: {
        new (options: ComponentConstructorOptions<Props<514>>): SvelteComponent<Props<514>, Events<514>, Slots<514>>;
    };
    readonly LessEqualCompare: {
        new (options: ComponentConstructorOptions<Props<515>>): SvelteComponent<Props<515>, Events<515>, Slots<515>>;
    };
    readonly GreaterCompare: {
        new (options: ComponentConstructorOptions<Props<516>>): SvelteComponent<Props<516>, Events<516>, Slots<516>>;
    };
    readonly NotEqualCompare: {
        new (options: ComponentConstructorOptions<Props<517>>): SvelteComponent<Props<517>, Events<517>, Slots<517>>;
    };
    readonly GreaterEqualCompare: {
        new (options: ComponentConstructorOptions<Props<518>>): SvelteComponent<Props<518>, Events<518>, Slots<518>>;
    };
    readonly AlwaysCompare: {
        new (options: ComponentConstructorOptions<Props<519>>): SvelteComponent<Props<519>, Events<519>, Slots<519>>;
    };
    readonly StaticDrawUsage: {
        new (options: ComponentConstructorOptions<Props<35044>>): SvelteComponent<Props<35044>, Events<35044>, Slots<35044>>;
    };
    readonly DynamicDrawUsage: {
        new (options: ComponentConstructorOptions<Props<35048>>): SvelteComponent<Props<35048>, Events<35048>, Slots<35048>>;
    };
    readonly StreamDrawUsage: {
        new (options: ComponentConstructorOptions<Props<35040>>): SvelteComponent<Props<35040>, Events<35040>, Slots<35040>>;
    };
    readonly StaticReadUsage: {
        new (options: ComponentConstructorOptions<Props<35045>>): SvelteComponent<Props<35045>, Events<35045>, Slots<35045>>;
    };
    readonly DynamicReadUsage: {
        new (options: ComponentConstructorOptions<Props<35049>>): SvelteComponent<Props<35049>, Events<35049>, Slots<35049>>;
    };
    readonly StreamReadUsage: {
        new (options: ComponentConstructorOptions<Props<35041>>): SvelteComponent<Props<35041>, Events<35041>, Slots<35041>>;
    };
    readonly StaticCopyUsage: {
        new (options: ComponentConstructorOptions<Props<35046>>): SvelteComponent<Props<35046>, Events<35046>, Slots<35046>>;
    };
    readonly DynamicCopyUsage: {
        new (options: ComponentConstructorOptions<Props<35050>>): SvelteComponent<Props<35050>, Events<35050>, Slots<35050>>;
    };
    readonly StreamCopyUsage: {
        new (options: ComponentConstructorOptions<Props<35042>>): SvelteComponent<Props<35042>, Events<35042>, Slots<35042>>;
    };
    readonly GLSL1: {
        new (options: ComponentConstructorOptions<Props<"100">>): SvelteComponent<Props<"100">, Events<"100">, Slots<"100">>;
    };
    readonly GLSL3: {
        new (options: ComponentConstructorOptions<Props<"300 es">>): SvelteComponent<Props<"300 es">, Events<"300 es">, Slots<"300 es">>;
    };
    readonly WebGLCoordinateSystem: {
        new (options: ComponentConstructorOptions<Props<2000>>): SvelteComponent<Props<2000>, Events<2000>, Slots<2000>>;
    };
    readonly WebGPUCoordinateSystem: {
        new (options: ComponentConstructorOptions<Props<2001>>): SvelteComponent<Props<2001>, Events<2001>, Slots<2001>>;
    };
    VectorKeyframeTrack: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.VectorKeyframeTrack>>): SvelteComponent<Props<typeof THREE.VectorKeyframeTrack>, Events<typeof THREE.VectorKeyframeTrack>, Slots<typeof THREE.VectorKeyframeTrack>>;
    };
    StringKeyframeTrack: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.StringKeyframeTrack>>): SvelteComponent<Props<typeof THREE.StringKeyframeTrack>, Events<typeof THREE.StringKeyframeTrack>, Slots<typeof THREE.StringKeyframeTrack>>;
    };
    QuaternionKeyframeTrack: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.QuaternionKeyframeTrack>>): SvelteComponent<Props<typeof THREE.QuaternionKeyframeTrack>, Events<typeof THREE.QuaternionKeyframeTrack>, Slots<typeof THREE.QuaternionKeyframeTrack>>;
    };
    NumberKeyframeTrack: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.NumberKeyframeTrack>>): SvelteComponent<Props<typeof THREE.NumberKeyframeTrack>, Events<typeof THREE.NumberKeyframeTrack>, Slots<typeof THREE.NumberKeyframeTrack>>;
    };
    ColorKeyframeTrack: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ColorKeyframeTrack>>): SvelteComponent<Props<typeof THREE.ColorKeyframeTrack>, Events<typeof THREE.ColorKeyframeTrack>, Slots<typeof THREE.ColorKeyframeTrack>>;
    };
    BooleanKeyframeTrack: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.BooleanKeyframeTrack>>): SvelteComponent<Props<typeof THREE.BooleanKeyframeTrack>, Events<typeof THREE.BooleanKeyframeTrack>, Slots<typeof THREE.BooleanKeyframeTrack>>;
    };
    PropertyMixer: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.PropertyMixer>>): SvelteComponent<Props<typeof THREE.PropertyMixer>, Events<typeof THREE.PropertyMixer>, Slots<typeof THREE.PropertyMixer>>;
    };
    PropertyBinding: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.PropertyBinding>>): SvelteComponent<Props<typeof THREE.PropertyBinding>, Events<typeof THREE.PropertyBinding>, Slots<typeof THREE.PropertyBinding>>;
    };
    KeyframeTrack: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.KeyframeTrack>>): SvelteComponent<Props<typeof THREE.KeyframeTrack>, Events<typeof THREE.KeyframeTrack>, Slots<typeof THREE.KeyframeTrack>>;
    };
    AnimationObjectGroup: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.AnimationObjectGroup>>): SvelteComponent<Props<typeof THREE.AnimationObjectGroup>, Events<typeof THREE.AnimationObjectGroup>, Slots<typeof THREE.AnimationObjectGroup>>;
    };
    AnimationMixer: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.AnimationMixer>>): SvelteComponent<Props<typeof THREE.AnimationMixer>, Events<typeof THREE.AnimationMixer>, Slots<typeof THREE.AnimationMixer>>;
    };
    AnimationClip: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.AnimationClip>>): SvelteComponent<Props<typeof THREE.AnimationClip>, Events<typeof THREE.AnimationClip>, Slots<typeof THREE.AnimationClip>>;
    };
    AnimationAction: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.AnimationAction>>): SvelteComponent<Props<typeof THREE.AnimationAction>, Events<typeof THREE.AnimationAction>, Slots<typeof THREE.AnimationAction>>;
    };
    AudioListener: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.AudioListener>>): SvelteComponent<Props<typeof THREE.AudioListener>, Events<typeof THREE.AudioListener>, Slots<typeof THREE.AudioListener>>;
    };
    PositionalAudio: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.PositionalAudio>>): SvelteComponent<Props<typeof THREE.PositionalAudio>, Events<typeof THREE.PositionalAudio>, Slots<typeof THREE.PositionalAudio>>;
    };
    AudioContext: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.AudioContext>>): SvelteComponent<Props<typeof THREE.AudioContext>, Events<typeof THREE.AudioContext>, Slots<typeof THREE.AudioContext>>;
    };
    AudioAnalyser: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.AudioAnalyser>>): SvelteComponent<Props<typeof THREE.AudioAnalyser>, Events<typeof THREE.AudioAnalyser>, Slots<typeof THREE.AudioAnalyser>>;
    };
    Audio: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Audio>>): SvelteComponent<Props<typeof THREE.Audio>, Events<typeof THREE.Audio>, Slots<typeof THREE.Audio>>;
    };
    StereoCamera: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.StereoCamera>>): SvelteComponent<Props<typeof THREE.StereoCamera>, Events<typeof THREE.StereoCamera>, Slots<typeof THREE.StereoCamera>>;
    };
    PerspectiveCamera: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.PerspectiveCamera>>): SvelteComponent<Props<typeof THREE.PerspectiveCamera>, Events<typeof THREE.PerspectiveCamera>, Slots<typeof THREE.PerspectiveCamera>>;
    };
    OrthographicCamera: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.OrthographicCamera>>): SvelteComponent<Props<typeof THREE.OrthographicCamera>, Events<typeof THREE.OrthographicCamera>, Slots<typeof THREE.OrthographicCamera>>;
    };
    CubeCamera: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CubeCamera>>): SvelteComponent<Props<typeof THREE.CubeCamera>, Events<typeof THREE.CubeCamera>, Slots<typeof THREE.CubeCamera>>;
    };
    ArrayCamera: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ArrayCamera>>): SvelteComponent<Props<typeof THREE.ArrayCamera>, Events<typeof THREE.ArrayCamera>, Slots<typeof THREE.ArrayCamera>>;
    };
    Camera: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Camera>>): SvelteComponent<Props<typeof THREE.Camera>, Events<typeof THREE.Camera>, Slots<typeof THREE.Camera>>;
    };
    RenderTarget: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.RenderTarget>>): SvelteComponent<Props<typeof THREE.RenderTarget>, Events<typeof THREE.RenderTarget>, Slots<typeof THREE.RenderTarget>>;
    };
    Uniform: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Uniform>>): SvelteComponent<Props<typeof THREE.Uniform>, Events<typeof THREE.Uniform>, Slots<typeof THREE.Uniform>>;
    };
    UniformsGroup: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.UniformsGroup>>): SvelteComponent<Props<typeof THREE.UniformsGroup>, Events<typeof THREE.UniformsGroup>, Slots<typeof THREE.UniformsGroup>>;
    };
    InstancedBufferGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.InstancedBufferGeometry>>): SvelteComponent<Props<typeof THREE.InstancedBufferGeometry>, Events<typeof THREE.InstancedBufferGeometry>, Slots<typeof THREE.InstancedBufferGeometry>>;
    };
    BufferGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.BufferGeometry>>): SvelteComponent<Props<typeof THREE.BufferGeometry>, Events<typeof THREE.BufferGeometry>, Slots<typeof THREE.BufferGeometry>>;
    };
    InterleavedBufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.InterleavedBufferAttribute>>): SvelteComponent<Props<typeof THREE.InterleavedBufferAttribute>, Events<typeof THREE.InterleavedBufferAttribute>, Slots<typeof THREE.InterleavedBufferAttribute>>;
    };
    InstancedInterleavedBuffer: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.InstancedInterleavedBuffer>>): SvelteComponent<Props<typeof THREE.InstancedInterleavedBuffer>, Events<typeof THREE.InstancedInterleavedBuffer>, Slots<typeof THREE.InstancedInterleavedBuffer>>;
    };
    InterleavedBuffer: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.InterleavedBuffer>>): SvelteComponent<Props<typeof THREE.InterleavedBuffer>, Events<typeof THREE.InterleavedBuffer>, Slots<typeof THREE.InterleavedBuffer>>;
    };
    InstancedBufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.InstancedBufferAttribute>>): SvelteComponent<Props<typeof THREE.InstancedBufferAttribute>, Events<typeof THREE.InstancedBufferAttribute>, Slots<typeof THREE.InstancedBufferAttribute>>;
    };
    GLBufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.GLBufferAttribute>>): SvelteComponent<Props<typeof THREE.GLBufferAttribute>, Events<typeof THREE.GLBufferAttribute>, Slots<typeof THREE.GLBufferAttribute>>;
    };
    BufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.BufferAttribute>>): SvelteComponent<Props<typeof THREE.BufferAttribute>, Events<typeof THREE.BufferAttribute>, Slots<typeof THREE.BufferAttribute>>;
    };
    Int8BufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Int8BufferAttribute>>): SvelteComponent<Props<typeof THREE.Int8BufferAttribute>, Events<typeof THREE.Int8BufferAttribute>, Slots<typeof THREE.Int8BufferAttribute>>;
    };
    Uint8BufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Uint8BufferAttribute>>): SvelteComponent<Props<typeof THREE.Uint8BufferAttribute>, Events<typeof THREE.Uint8BufferAttribute>, Slots<typeof THREE.Uint8BufferAttribute>>;
    };
    Uint8ClampedBufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Uint8ClampedBufferAttribute>>): SvelteComponent<Props<typeof THREE.Uint8ClampedBufferAttribute>, Events<typeof THREE.Uint8ClampedBufferAttribute>, Slots<typeof THREE.Uint8ClampedBufferAttribute>>;
    };
    Int16BufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Int16BufferAttribute>>): SvelteComponent<Props<typeof THREE.Int16BufferAttribute>, Events<typeof THREE.Int16BufferAttribute>, Slots<typeof THREE.Int16BufferAttribute>>;
    };
    Uint16BufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Uint16BufferAttribute>>): SvelteComponent<Props<typeof THREE.Uint16BufferAttribute>, Events<typeof THREE.Uint16BufferAttribute>, Slots<typeof THREE.Uint16BufferAttribute>>;
    };
    Int32BufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Int32BufferAttribute>>): SvelteComponent<Props<typeof THREE.Int32BufferAttribute>, Events<typeof THREE.Int32BufferAttribute>, Slots<typeof THREE.Int32BufferAttribute>>;
    };
    Uint32BufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Uint32BufferAttribute>>): SvelteComponent<Props<typeof THREE.Uint32BufferAttribute>, Events<typeof THREE.Uint32BufferAttribute>, Slots<typeof THREE.Uint32BufferAttribute>>;
    };
    Float16BufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Float16BufferAttribute>>): SvelteComponent<Props<typeof THREE.Float16BufferAttribute>, Events<typeof THREE.Float16BufferAttribute>, Slots<typeof THREE.Float16BufferAttribute>>;
    };
    Float32BufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Float32BufferAttribute>>): SvelteComponent<Props<typeof THREE.Float32BufferAttribute>, Events<typeof THREE.Float32BufferAttribute>, Slots<typeof THREE.Float32BufferAttribute>>;
    };
    Float64BufferAttribute: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Float64BufferAttribute>>): SvelteComponent<Props<typeof THREE.Float64BufferAttribute>, Events<typeof THREE.Float64BufferAttribute>, Slots<typeof THREE.Float64BufferAttribute>>;
    };
    Object3D: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Object3D>>): SvelteComponent<Props<typeof THREE.Object3D>, Events<typeof THREE.Object3D>, Slots<typeof THREE.Object3D>>;
    };
    Raycaster: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Raycaster>>): SvelteComponent<Props<typeof THREE.Raycaster>, Events<typeof THREE.Raycaster>, Slots<typeof THREE.Raycaster>>;
    };
    Layers: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Layers>>): SvelteComponent<Props<typeof THREE.Layers>, Events<typeof THREE.Layers>, Slots<typeof THREE.Layers>>;
    };
    EventDispatcher: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.EventDispatcher>>): SvelteComponent<Props<typeof THREE.EventDispatcher>, Events<typeof THREE.EventDispatcher>, Slots<typeof THREE.EventDispatcher>>;
    };
    Clock: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Clock>>): SvelteComponent<Props<typeof THREE.Clock>, Events<typeof THREE.Clock>, Slots<typeof THREE.Clock>>;
    };
    ArcCurve: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ArcCurve>>): SvelteComponent<Props<typeof THREE.ArcCurve>, Events<typeof THREE.ArcCurve>, Slots<typeof THREE.ArcCurve>>;
    };
    CatmullRomCurve3: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CatmullRomCurve3>>): SvelteComponent<Props<typeof THREE.CatmullRomCurve3>, Events<typeof THREE.CatmullRomCurve3>, Slots<typeof THREE.CatmullRomCurve3>>;
    };
    CubicBezierCurve: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CubicBezierCurve>>): SvelteComponent<Props<typeof THREE.CubicBezierCurve>, Events<typeof THREE.CubicBezierCurve>, Slots<typeof THREE.CubicBezierCurve>>;
    };
    CubicBezierCurve3: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CubicBezierCurve3>>): SvelteComponent<Props<typeof THREE.CubicBezierCurve3>, Events<typeof THREE.CubicBezierCurve3>, Slots<typeof THREE.CubicBezierCurve3>>;
    };
    EllipseCurve: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.EllipseCurve>>): SvelteComponent<Props<typeof THREE.EllipseCurve>, Events<typeof THREE.EllipseCurve>, Slots<typeof THREE.EllipseCurve>>;
    };
    LineCurve: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.LineCurve>>): SvelteComponent<Props<typeof THREE.LineCurve>, Events<typeof THREE.LineCurve>, Slots<typeof THREE.LineCurve>>;
    };
    LineCurve3: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.LineCurve3>>): SvelteComponent<Props<typeof THREE.LineCurve3>, Events<typeof THREE.LineCurve3>, Slots<typeof THREE.LineCurve3>>;
    };
    QuadraticBezierCurve: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.QuadraticBezierCurve>>): SvelteComponent<Props<typeof THREE.QuadraticBezierCurve>, Events<typeof THREE.QuadraticBezierCurve>, Slots<typeof THREE.QuadraticBezierCurve>>;
    };
    QuadraticBezierCurve3: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.QuadraticBezierCurve3>>): SvelteComponent<Props<typeof THREE.QuadraticBezierCurve3>, Events<typeof THREE.QuadraticBezierCurve3>, Slots<typeof THREE.QuadraticBezierCurve3>>;
    };
    SplineCurve: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.SplineCurve>>): SvelteComponent<Props<typeof THREE.SplineCurve>, Events<typeof THREE.SplineCurve>, Slots<typeof THREE.SplineCurve>>;
    };
    Shape: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Shape>>): SvelteComponent<Props<typeof THREE.Shape>, Events<typeof THREE.Shape>, Slots<typeof THREE.Shape>>;
    };
    Path: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Path>>): SvelteComponent<Props<typeof THREE.Path>, Events<typeof THREE.Path>, Slots<typeof THREE.Path>>;
    };
    ShapePath: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ShapePath>>): SvelteComponent<Props<typeof THREE.ShapePath>, Events<typeof THREE.ShapePath>, Slots<typeof THREE.ShapePath>>;
    };
    CurvePath: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CurvePath>>): SvelteComponent<Props<typeof THREE.CurvePath>, Events<typeof THREE.CurvePath>, Slots<typeof THREE.CurvePath>>;
    };
    Curve: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Curve>>): SvelteComponent<Props<typeof THREE.Curve>, Events<typeof THREE.Curve>, Slots<typeof THREE.Curve>>;
    };
    CatmullRom: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CatmullRom>>): SvelteComponent<Props<typeof THREE.CatmullRom>, Events<typeof THREE.CatmullRom>, Slots<typeof THREE.CatmullRom>>;
    };
    QuadraticBezier: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.QuadraticBezier>>): SvelteComponent<Props<typeof THREE.QuadraticBezier>, Events<typeof THREE.QuadraticBezier>, Slots<typeof THREE.QuadraticBezier>>;
    };
    CubicBezier: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CubicBezier>>): SvelteComponent<Props<typeof THREE.CubicBezier>, Events<typeof THREE.CubicBezier>, Slots<typeof THREE.CubicBezier>>;
    };
    ImageUtils: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ImageUtils>>): SvelteComponent<Props<typeof THREE.ImageUtils>, Events<typeof THREE.ImageUtils>, Slots<typeof THREE.ImageUtils>>;
    };
    ShapeUtils: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ShapeUtils>>): SvelteComponent<Props<typeof THREE.ShapeUtils>, Events<typeof THREE.ShapeUtils>, Slots<typeof THREE.ShapeUtils>>;
    };
    PMREMGenerator: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.PMREMGenerator>>): SvelteComponent<Props<typeof THREE.PMREMGenerator>, Events<typeof THREE.PMREMGenerator>, Slots<typeof THREE.PMREMGenerator>>;
    };
    BoxGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.BoxGeometry>>): SvelteComponent<Props<typeof THREE.BoxGeometry>, Events<typeof THREE.BoxGeometry>, Slots<typeof THREE.BoxGeometry>>;
    };
    CapsuleGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CapsuleGeometry>>): SvelteComponent<Props<typeof THREE.CapsuleGeometry>, Events<typeof THREE.CapsuleGeometry>, Slots<typeof THREE.CapsuleGeometry>>;
    };
    CircleGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CircleGeometry>>): SvelteComponent<Props<typeof THREE.CircleGeometry>, Events<typeof THREE.CircleGeometry>, Slots<typeof THREE.CircleGeometry>>;
    };
    ConeGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ConeGeometry>>): SvelteComponent<Props<typeof THREE.ConeGeometry>, Events<typeof THREE.ConeGeometry>, Slots<typeof THREE.ConeGeometry>>;
    };
    CylinderGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CylinderGeometry>>): SvelteComponent<Props<typeof THREE.CylinderGeometry>, Events<typeof THREE.CylinderGeometry>, Slots<typeof THREE.CylinderGeometry>>;
    };
    DodecahedronGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.DodecahedronGeometry>>): SvelteComponent<Props<typeof THREE.DodecahedronGeometry>, Events<typeof THREE.DodecahedronGeometry>, Slots<typeof THREE.DodecahedronGeometry>>;
    };
    EdgesGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.EdgesGeometry>>): SvelteComponent<Props<typeof THREE.EdgesGeometry>, Events<typeof THREE.EdgesGeometry>, Slots<typeof THREE.EdgesGeometry>>;
    };
    ExtrudeGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ExtrudeGeometry>>): SvelteComponent<Props<typeof THREE.ExtrudeGeometry>, Events<typeof THREE.ExtrudeGeometry>, Slots<typeof THREE.ExtrudeGeometry>>;
    };
    IcosahedronGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.IcosahedronGeometry>>): SvelteComponent<Props<typeof THREE.IcosahedronGeometry>, Events<typeof THREE.IcosahedronGeometry>, Slots<typeof THREE.IcosahedronGeometry>>;
    };
    LatheGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.LatheGeometry>>): SvelteComponent<Props<typeof THREE.LatheGeometry>, Events<typeof THREE.LatheGeometry>, Slots<typeof THREE.LatheGeometry>>;
    };
    OctahedronGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.OctahedronGeometry>>): SvelteComponent<Props<typeof THREE.OctahedronGeometry>, Events<typeof THREE.OctahedronGeometry>, Slots<typeof THREE.OctahedronGeometry>>;
    };
    PlaneGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.PlaneGeometry>>): SvelteComponent<Props<typeof THREE.PlaneGeometry>, Events<typeof THREE.PlaneGeometry>, Slots<typeof THREE.PlaneGeometry>>;
    };
    PolyhedronGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.PolyhedronGeometry>>): SvelteComponent<Props<typeof THREE.PolyhedronGeometry>, Events<typeof THREE.PolyhedronGeometry>, Slots<typeof THREE.PolyhedronGeometry>>;
    };
    RingGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.RingGeometry>>): SvelteComponent<Props<typeof THREE.RingGeometry>, Events<typeof THREE.RingGeometry>, Slots<typeof THREE.RingGeometry>>;
    };
    ShapeGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ShapeGeometry>>): SvelteComponent<Props<typeof THREE.ShapeGeometry>, Events<typeof THREE.ShapeGeometry>, Slots<typeof THREE.ShapeGeometry>>;
    };
    SphereGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.SphereGeometry>>): SvelteComponent<Props<typeof THREE.SphereGeometry>, Events<typeof THREE.SphereGeometry>, Slots<typeof THREE.SphereGeometry>>;
    };
    TetrahedronGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.TetrahedronGeometry>>): SvelteComponent<Props<typeof THREE.TetrahedronGeometry>, Events<typeof THREE.TetrahedronGeometry>, Slots<typeof THREE.TetrahedronGeometry>>;
    };
    TorusGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.TorusGeometry>>): SvelteComponent<Props<typeof THREE.TorusGeometry>, Events<typeof THREE.TorusGeometry>, Slots<typeof THREE.TorusGeometry>>;
    };
    TorusKnotGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.TorusKnotGeometry>>): SvelteComponent<Props<typeof THREE.TorusKnotGeometry>, Events<typeof THREE.TorusKnotGeometry>, Slots<typeof THREE.TorusKnotGeometry>>;
    };
    TubeGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.TubeGeometry>>): SvelteComponent<Props<typeof THREE.TubeGeometry>, Events<typeof THREE.TubeGeometry>, Slots<typeof THREE.TubeGeometry>>;
    };
    WireframeGeometry: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WireframeGeometry>>): SvelteComponent<Props<typeof THREE.WireframeGeometry>, Events<typeof THREE.WireframeGeometry>, Slots<typeof THREE.WireframeGeometry>>;
    };
    SpotLightHelper: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.SpotLightHelper>>): SvelteComponent<Props<typeof THREE.SpotLightHelper>, Events<typeof THREE.SpotLightHelper>, Slots<typeof THREE.SpotLightHelper>>;
    };
    SkeletonHelper: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.SkeletonHelper>>): SvelteComponent<Props<typeof THREE.SkeletonHelper>, Events<typeof THREE.SkeletonHelper>, Slots<typeof THREE.SkeletonHelper>>;
    };
    PointLightHelper: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.PointLightHelper>>): SvelteComponent<Props<typeof THREE.PointLightHelper>, Events<typeof THREE.PointLightHelper>, Slots<typeof THREE.PointLightHelper>>;
    };
    HemisphereLightHelper: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.HemisphereLightHelper>>): SvelteComponent<Props<typeof THREE.HemisphereLightHelper>, Events<typeof THREE.HemisphereLightHelper>, Slots<typeof THREE.HemisphereLightHelper>>;
    };
    GridHelper: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.GridHelper>>): SvelteComponent<Props<typeof THREE.GridHelper>, Events<typeof THREE.GridHelper>, Slots<typeof THREE.GridHelper>>;
    };
    PolarGridHelper: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.PolarGridHelper>>): SvelteComponent<Props<typeof THREE.PolarGridHelper>, Events<typeof THREE.PolarGridHelper>, Slots<typeof THREE.PolarGridHelper>>;
    };
    DirectionalLightHelper: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.DirectionalLightHelper>>): SvelteComponent<Props<typeof THREE.DirectionalLightHelper>, Events<typeof THREE.DirectionalLightHelper>, Slots<typeof THREE.DirectionalLightHelper>>;
    };
    CameraHelper: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CameraHelper>>): SvelteComponent<Props<typeof THREE.CameraHelper>, Events<typeof THREE.CameraHelper>, Slots<typeof THREE.CameraHelper>>;
    };
    BoxHelper: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.BoxHelper>>): SvelteComponent<Props<typeof THREE.BoxHelper>, Events<typeof THREE.BoxHelper>, Slots<typeof THREE.BoxHelper>>;
    };
    Box3Helper: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Box3Helper>>): SvelteComponent<Props<typeof THREE.Box3Helper>, Events<typeof THREE.Box3Helper>, Slots<typeof THREE.Box3Helper>>;
    };
    PlaneHelper: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.PlaneHelper>>): SvelteComponent<Props<typeof THREE.PlaneHelper>, Events<typeof THREE.PlaneHelper>, Slots<typeof THREE.PlaneHelper>>;
    };
    ArrowHelper: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ArrowHelper>>): SvelteComponent<Props<typeof THREE.ArrowHelper>, Events<typeof THREE.ArrowHelper>, Slots<typeof THREE.ArrowHelper>>;
    };
    AxesHelper: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.AxesHelper>>): SvelteComponent<Props<typeof THREE.AxesHelper>, Events<typeof THREE.AxesHelper>, Slots<typeof THREE.AxesHelper>>;
    };
    SpotLightShadow: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.SpotLightShadow>>): SvelteComponent<Props<typeof THREE.SpotLightShadow>, Events<typeof THREE.SpotLightShadow>, Slots<typeof THREE.SpotLightShadow>>;
    };
    SpotLight: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.SpotLight>>): SvelteComponent<Props<typeof THREE.SpotLight>, Events<typeof THREE.SpotLight>, Slots<typeof THREE.SpotLight>>;
    };
    PointLight: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.PointLight>>): SvelteComponent<Props<typeof THREE.PointLight>, Events<typeof THREE.PointLight>, Slots<typeof THREE.PointLight>>;
    };
    PointLightShadow: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.PointLightShadow>>): SvelteComponent<Props<typeof THREE.PointLightShadow>, Events<typeof THREE.PointLightShadow>, Slots<typeof THREE.PointLightShadow>>;
    };
    RectAreaLight: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.RectAreaLight>>): SvelteComponent<Props<typeof THREE.RectAreaLight>, Events<typeof THREE.RectAreaLight>, Slots<typeof THREE.RectAreaLight>>;
    };
    HemisphereLight: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.HemisphereLight>>): SvelteComponent<Props<typeof THREE.HemisphereLight>, Events<typeof THREE.HemisphereLight>, Slots<typeof THREE.HemisphereLight>>;
    };
    DirectionalLightShadow: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.DirectionalLightShadow>>): SvelteComponent<Props<typeof THREE.DirectionalLightShadow>, Events<typeof THREE.DirectionalLightShadow>, Slots<typeof THREE.DirectionalLightShadow>>;
    };
    DirectionalLight: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.DirectionalLight>>): SvelteComponent<Props<typeof THREE.DirectionalLight>, Events<typeof THREE.DirectionalLight>, Slots<typeof THREE.DirectionalLight>>;
    };
    AmbientLight: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.AmbientLight>>): SvelteComponent<Props<typeof THREE.AmbientLight>, Events<typeof THREE.AmbientLight>, Slots<typeof THREE.AmbientLight>>;
    };
    LightShadow: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.LightShadow>>): SvelteComponent<Props<typeof THREE.LightShadow>, Events<typeof THREE.LightShadow>, Slots<typeof THREE.LightShadow>>;
    };
    Light: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Light>>): SvelteComponent<Props<typeof THREE.Light>, Events<typeof THREE.Light>, Slots<typeof THREE.Light>>;
    };
    AmbientLightProbe: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.AmbientLightProbe>>): SvelteComponent<Props<typeof THREE.AmbientLightProbe>, Events<typeof THREE.AmbientLightProbe>, Slots<typeof THREE.AmbientLightProbe>>;
    };
    HemisphereLightProbe: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.HemisphereLightProbe>>): SvelteComponent<Props<typeof THREE.HemisphereLightProbe>, Events<typeof THREE.HemisphereLightProbe>, Slots<typeof THREE.HemisphereLightProbe>>;
    };
    LightProbe: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.LightProbe>>): SvelteComponent<Props<typeof THREE.LightProbe>, Events<typeof THREE.LightProbe>, Slots<typeof THREE.LightProbe>>;
    };
    AnimationLoader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.AnimationLoader>>): SvelteComponent<Props<typeof THREE.AnimationLoader>, Events<typeof THREE.AnimationLoader>, Slots<typeof THREE.AnimationLoader>>;
    };
    CompressedTextureLoader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CompressedTextureLoader>>): SvelteComponent<Props<typeof THREE.CompressedTextureLoader>, Events<typeof THREE.CompressedTextureLoader>, Slots<typeof THREE.CompressedTextureLoader>>;
    };
    DataTextureLoader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.DataTextureLoader>>): SvelteComponent<Props<typeof THREE.DataTextureLoader>, Events<typeof THREE.DataTextureLoader>, Slots<typeof THREE.DataTextureLoader>>;
    };
    CubeTextureLoader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CubeTextureLoader>>): SvelteComponent<Props<typeof THREE.CubeTextureLoader>, Events<typeof THREE.CubeTextureLoader>, Slots<typeof THREE.CubeTextureLoader>>;
    };
    TextureLoader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.TextureLoader>>): SvelteComponent<Props<typeof THREE.TextureLoader>, Events<typeof THREE.TextureLoader>, Slots<typeof THREE.TextureLoader>>;
    };
    ObjectLoader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ObjectLoader>>): SvelteComponent<Props<typeof THREE.ObjectLoader>, Events<typeof THREE.ObjectLoader>, Slots<typeof THREE.ObjectLoader>>;
    };
    MaterialLoader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.MaterialLoader>>): SvelteComponent<Props<typeof THREE.MaterialLoader>, Events<typeof THREE.MaterialLoader>, Slots<typeof THREE.MaterialLoader>>;
    };
    BufferGeometryLoader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.BufferGeometryLoader>>): SvelteComponent<Props<typeof THREE.BufferGeometryLoader>, Events<typeof THREE.BufferGeometryLoader>, Slots<typeof THREE.BufferGeometryLoader>>;
    };
    readonly DefaultLoadingManager: {
        new (options: ComponentConstructorOptions<Props<THREE.LoadingManager>>): SvelteComponent<Props<THREE.LoadingManager>, Events<THREE.LoadingManager>, Slots<THREE.LoadingManager>>;
    };
    LoadingManager: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.LoadingManager>>): SvelteComponent<Props<typeof THREE.LoadingManager>, Events<typeof THREE.LoadingManager>, Slots<typeof THREE.LoadingManager>>;
    };
    ImageLoader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ImageLoader>>): SvelteComponent<Props<typeof THREE.ImageLoader>, Events<typeof THREE.ImageLoader>, Slots<typeof THREE.ImageLoader>>;
    };
    ImageBitmapLoader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ImageBitmapLoader>>): SvelteComponent<Props<typeof THREE.ImageBitmapLoader>, Events<typeof THREE.ImageBitmapLoader>, Slots<typeof THREE.ImageBitmapLoader>>;
    };
    FileLoader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.FileLoader>>): SvelteComponent<Props<typeof THREE.FileLoader>, Events<typeof THREE.FileLoader>, Slots<typeof THREE.FileLoader>>;
    };
    Loader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Loader>>): SvelteComponent<Props<typeof THREE.Loader>, Events<typeof THREE.Loader>, Slots<typeof THREE.Loader>>;
    };
    readonly LoaderUtils: {
        new (options: ComponentConstructorOptions<Props<THREE.LoaderUtils>>): SvelteComponent<Props<THREE.LoaderUtils>, Events<THREE.LoaderUtils>, Slots<THREE.LoaderUtils>>;
    };
    Cache: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Cache>>): SvelteComponent<Props<typeof THREE.Cache>, Events<typeof THREE.Cache>, Slots<typeof THREE.Cache>>;
    };
    AudioLoader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.AudioLoader>>): SvelteComponent<Props<typeof THREE.AudioLoader>, Events<typeof THREE.AudioLoader>, Slots<typeof THREE.AudioLoader>>;
    };
    ShadowMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ShadowMaterial>>): SvelteComponent<Props<typeof THREE.ShadowMaterial>, Events<typeof THREE.ShadowMaterial>, Slots<typeof THREE.ShadowMaterial>>;
    };
    SpriteMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.SpriteMaterial>>): SvelteComponent<Props<typeof THREE.SpriteMaterial>, Events<typeof THREE.SpriteMaterial>, Slots<typeof THREE.SpriteMaterial>>;
    };
    RawShaderMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.RawShaderMaterial>>): SvelteComponent<Props<typeof THREE.RawShaderMaterial>, Events<typeof THREE.RawShaderMaterial>, Slots<typeof THREE.RawShaderMaterial>>;
    };
    ShaderMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.ShaderMaterial>>): SvelteComponent<Props<typeof THREE.ShaderMaterial>, Events<typeof THREE.ShaderMaterial>, Slots<typeof THREE.ShaderMaterial>>;
    };
    PointsMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.PointsMaterial>>): SvelteComponent<Props<typeof THREE.PointsMaterial>, Events<typeof THREE.PointsMaterial>, Slots<typeof THREE.PointsMaterial>>;
    };
    MeshPhysicalMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.MeshPhysicalMaterial>>): SvelteComponent<Props<typeof THREE.MeshPhysicalMaterial>, Events<typeof THREE.MeshPhysicalMaterial>, Slots<typeof THREE.MeshPhysicalMaterial>>;
    };
    MeshStandardMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.MeshStandardMaterial>>): SvelteComponent<Props<typeof THREE.MeshStandardMaterial>, Events<typeof THREE.MeshStandardMaterial>, Slots<typeof THREE.MeshStandardMaterial>>;
    };
    MeshPhongMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.MeshPhongMaterial>>): SvelteComponent<Props<typeof THREE.MeshPhongMaterial>, Events<typeof THREE.MeshPhongMaterial>, Slots<typeof THREE.MeshPhongMaterial>>;
    };
    MeshToonMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.MeshToonMaterial>>): SvelteComponent<Props<typeof THREE.MeshToonMaterial>, Events<typeof THREE.MeshToonMaterial>, Slots<typeof THREE.MeshToonMaterial>>;
    };
    MeshNormalMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.MeshNormalMaterial>>): SvelteComponent<Props<typeof THREE.MeshNormalMaterial>, Events<typeof THREE.MeshNormalMaterial>, Slots<typeof THREE.MeshNormalMaterial>>;
    };
    MeshLambertMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.MeshLambertMaterial>>): SvelteComponent<Props<typeof THREE.MeshLambertMaterial>, Events<typeof THREE.MeshLambertMaterial>, Slots<typeof THREE.MeshLambertMaterial>>;
    };
    MeshDepthMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.MeshDepthMaterial>>): SvelteComponent<Props<typeof THREE.MeshDepthMaterial>, Events<typeof THREE.MeshDepthMaterial>, Slots<typeof THREE.MeshDepthMaterial>>;
    };
    MeshDistanceMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.MeshDistanceMaterial>>): SvelteComponent<Props<typeof THREE.MeshDistanceMaterial>, Events<typeof THREE.MeshDistanceMaterial>, Slots<typeof THREE.MeshDistanceMaterial>>;
    };
    MeshBasicMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.MeshBasicMaterial>>): SvelteComponent<Props<typeof THREE.MeshBasicMaterial>, Events<typeof THREE.MeshBasicMaterial>, Slots<typeof THREE.MeshBasicMaterial>>;
    };
    MeshMatcapMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.MeshMatcapMaterial>>): SvelteComponent<Props<typeof THREE.MeshMatcapMaterial>, Events<typeof THREE.MeshMatcapMaterial>, Slots<typeof THREE.MeshMatcapMaterial>>;
    };
    LineDashedMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.LineDashedMaterial>>): SvelteComponent<Props<typeof THREE.LineDashedMaterial>, Events<typeof THREE.LineDashedMaterial>, Slots<typeof THREE.LineDashedMaterial>>;
    };
    LineBasicMaterial: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.LineBasicMaterial>>): SvelteComponent<Props<typeof THREE.LineBasicMaterial>, Events<typeof THREE.LineBasicMaterial>, Slots<typeof THREE.LineBasicMaterial>>;
    };
    Material: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Material>>): SvelteComponent<Props<typeof THREE.Material>, Events<typeof THREE.Material>, Slots<typeof THREE.Material>>;
    };
    QuaternionLinearInterpolant: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.QuaternionLinearInterpolant>>): SvelteComponent<Props<typeof THREE.QuaternionLinearInterpolant>, Events<typeof THREE.QuaternionLinearInterpolant>, Slots<typeof THREE.QuaternionLinearInterpolant>>;
    };
    LinearInterpolant: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.LinearInterpolant>>): SvelteComponent<Props<typeof THREE.LinearInterpolant>, Events<typeof THREE.LinearInterpolant>, Slots<typeof THREE.LinearInterpolant>>;
    };
    DiscreteInterpolant: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.DiscreteInterpolant>>): SvelteComponent<Props<typeof THREE.DiscreteInterpolant>, Events<typeof THREE.DiscreteInterpolant>, Slots<typeof THREE.DiscreteInterpolant>>;
    };
    CubicInterpolant: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CubicInterpolant>>): SvelteComponent<Props<typeof THREE.CubicInterpolant>, Events<typeof THREE.CubicInterpolant>, Slots<typeof THREE.CubicInterpolant>>;
    };
    Interpolant: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Interpolant>>): SvelteComponent<Props<typeof THREE.Interpolant>, Events<typeof THREE.Interpolant>, Slots<typeof THREE.Interpolant>>;
    };
    Triangle: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Triangle>>): SvelteComponent<Props<typeof THREE.Triangle>, Events<typeof THREE.Triangle>, Slots<typeof THREE.Triangle>>;
    };
    Spherical: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Spherical>>): SvelteComponent<Props<typeof THREE.Spherical>, Events<typeof THREE.Spherical>, Slots<typeof THREE.Spherical>>;
    };
    Cylindrical: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Cylindrical>>): SvelteComponent<Props<typeof THREE.Cylindrical>, Events<typeof THREE.Cylindrical>, Slots<typeof THREE.Cylindrical>>;
    };
    Plane: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Plane>>): SvelteComponent<Props<typeof THREE.Plane>, Events<typeof THREE.Plane>, Slots<typeof THREE.Plane>>;
    };
    Frustum: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Frustum>>): SvelteComponent<Props<typeof THREE.Frustum>, Events<typeof THREE.Frustum>, Slots<typeof THREE.Frustum>>;
    };
    Sphere: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Sphere>>): SvelteComponent<Props<typeof THREE.Sphere>, Events<typeof THREE.Sphere>, Slots<typeof THREE.Sphere>>;
    };
    Ray: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Ray>>): SvelteComponent<Props<typeof THREE.Ray>, Events<typeof THREE.Ray>, Slots<typeof THREE.Ray>>;
    };
    Matrix4: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Matrix4>>): SvelteComponent<Props<typeof THREE.Matrix4>, Events<typeof THREE.Matrix4>, Slots<typeof THREE.Matrix4>>;
    };
    Matrix3: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Matrix3>>): SvelteComponent<Props<typeof THREE.Matrix3>, Events<typeof THREE.Matrix3>, Slots<typeof THREE.Matrix3>>;
    };
    Box3: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Box3>>): SvelteComponent<Props<typeof THREE.Box3>, Events<typeof THREE.Box3>, Slots<typeof THREE.Box3>>;
    };
    Box2: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Box2>>): SvelteComponent<Props<typeof THREE.Box2>, Events<typeof THREE.Box2>, Slots<typeof THREE.Box2>>;
    };
    Line3: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Line3>>): SvelteComponent<Props<typeof THREE.Line3>, Events<typeof THREE.Line3>, Slots<typeof THREE.Line3>>;
    };
    Euler: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Euler>>): SvelteComponent<Props<typeof THREE.Euler>, Events<typeof THREE.Euler>, Slots<typeof THREE.Euler>>;
    };
    Vector4: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Vector4>>): SvelteComponent<Props<typeof THREE.Vector4>, Events<typeof THREE.Vector4>, Slots<typeof THREE.Vector4>>;
    };
    Vector3: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Vector3>>): SvelteComponent<Props<typeof THREE.Vector3>, Events<typeof THREE.Vector3>, Slots<typeof THREE.Vector3>>;
    };
    Vector2: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Vector2>>): SvelteComponent<Props<typeof THREE.Vector2>, Events<typeof THREE.Vector2>, Slots<typeof THREE.Vector2>>;
    };
    Quaternion: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Quaternion>>): SvelteComponent<Props<typeof THREE.Quaternion>, Events<typeof THREE.Quaternion>, Slots<typeof THREE.Quaternion>>;
    };
    SRGBToLinear: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.SRGBToLinear>>): SvelteComponent<Props<typeof THREE.SRGBToLinear>, Events<typeof THREE.SRGBToLinear>, Slots<typeof THREE.SRGBToLinear>>;
    };
    Color: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Color>>): SvelteComponent<Props<typeof THREE.Color>, Events<typeof THREE.Color>, Slots<typeof THREE.Color>>;
    };
    SphericalHarmonics3: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.SphericalHarmonics3>>): SvelteComponent<Props<typeof THREE.SphericalHarmonics3>, Events<typeof THREE.SphericalHarmonics3>, Slots<typeof THREE.SphericalHarmonics3>>;
    };
    Sprite: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Sprite>>): SvelteComponent<Props<typeof THREE.Sprite>, Events<typeof THREE.Sprite>, Slots<typeof THREE.Sprite>>;
    };
    LOD: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.LOD>>): SvelteComponent<Props<typeof THREE.LOD>, Events<typeof THREE.LOD>, Slots<typeof THREE.LOD>>;
    };
    InstancedMesh: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.InstancedMesh>>): SvelteComponent<Props<typeof THREE.InstancedMesh>, Events<typeof THREE.InstancedMesh>, Slots<typeof THREE.InstancedMesh>>;
    };
    SkinnedMesh: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.SkinnedMesh>>): SvelteComponent<Props<typeof THREE.SkinnedMesh>, Events<typeof THREE.SkinnedMesh>, Slots<typeof THREE.SkinnedMesh>>;
    };
    Skeleton: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Skeleton>>): SvelteComponent<Props<typeof THREE.Skeleton>, Events<typeof THREE.Skeleton>, Slots<typeof THREE.Skeleton>>;
    };
    Bone: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Bone>>): SvelteComponent<Props<typeof THREE.Bone>, Events<typeof THREE.Bone>, Slots<typeof THREE.Bone>>;
    };
    Mesh: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Mesh>>): SvelteComponent<Props<typeof THREE.Mesh>, Events<typeof THREE.Mesh>, Slots<typeof THREE.Mesh>>;
    };
    LineSegments: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.LineSegments>>): SvelteComponent<Props<typeof THREE.LineSegments>, Events<typeof THREE.LineSegments>, Slots<typeof THREE.LineSegments>>;
    };
    LineLoop: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.LineLoop>>): SvelteComponent<Props<typeof THREE.LineLoop>, Events<typeof THREE.LineLoop>, Slots<typeof THREE.LineLoop>>;
    };
    Line: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Line>>): SvelteComponent<Props<typeof THREE.Line>, Events<typeof THREE.Line>, Slots<typeof THREE.Line>>;
    };
    Points: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Points>>): SvelteComponent<Props<typeof THREE.Points>, Events<typeof THREE.Points>, Slots<typeof THREE.Points>>;
    };
    Group: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Group>>): SvelteComponent<Props<typeof THREE.Group>, Events<typeof THREE.Group>, Slots<typeof THREE.Group>>;
    };
    WebGLCubeRenderTarget: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLCubeRenderTarget>>): SvelteComponent<Props<typeof THREE.WebGLCubeRenderTarget>, Events<typeof THREE.WebGLCubeRenderTarget>, Slots<typeof THREE.WebGLCubeRenderTarget>>;
    };
    WebGLMultipleRenderTargets: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLMultipleRenderTargets>>): SvelteComponent<Props<typeof THREE.WebGLMultipleRenderTargets>, Events<typeof THREE.WebGLMultipleRenderTargets>, Slots<typeof THREE.WebGLMultipleRenderTargets>>;
    };
    WebGLRenderTarget: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLRenderTarget>>): SvelteComponent<Props<typeof THREE.WebGLRenderTarget>, Events<typeof THREE.WebGLRenderTarget>, Slots<typeof THREE.WebGLRenderTarget>>;
    };
    WebGLRenderer: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLRenderer>>): SvelteComponent<Props<typeof THREE.WebGLRenderer>, Events<typeof THREE.WebGLRenderer>, Slots<typeof THREE.WebGLRenderer>>;
    };
    WebGL1Renderer: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGL1Renderer>>): SvelteComponent<Props<typeof THREE.WebGL1Renderer>, Events<typeof THREE.WebGL1Renderer>, Slots<typeof THREE.WebGL1Renderer>>;
    };
    WebGL3DRenderTarget: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGL3DRenderTarget>>): SvelteComponent<Props<typeof THREE.WebGL3DRenderTarget>, Events<typeof THREE.WebGL3DRenderTarget>, Slots<typeof THREE.WebGL3DRenderTarget>>;
    };
    WebGLArrayRenderTarget: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLArrayRenderTarget>>): SvelteComponent<Props<typeof THREE.WebGLArrayRenderTarget>, Events<typeof THREE.WebGLArrayRenderTarget>, Slots<typeof THREE.WebGLArrayRenderTarget>>;
    };
    ShaderLib: {
        new (options: ComponentConstructorOptions<Props<{
            [name: string]: THREE.Shader;
            basic: THREE.Shader;
            lambert: THREE.Shader;
            phong: THREE.Shader;
            standard: THREE.Shader;
            matcap: THREE.Shader;
            points: THREE.Shader;
            dashed: THREE.Shader;
            depth: THREE.Shader;
            normal: THREE.Shader;
            sprite: THREE.Shader;
            background: THREE.Shader;
            cube: THREE.Shader;
            equirect: THREE.Shader;
            distanceRGBA: THREE.Shader;
            shadow: THREE.Shader;
            physical: THREE.Shader;
        }>>): SvelteComponent<Props<{
            [name: string]: THREE.Shader;
            basic: THREE.Shader;
            lambert: THREE.Shader;
            phong: THREE.Shader;
            standard: THREE.Shader;
            matcap: THREE.Shader;
            points: THREE.Shader;
            dashed: THREE.Shader;
            depth: THREE.Shader;
            normal: THREE.Shader;
            sprite: THREE.Shader;
            background: THREE.Shader;
            cube: THREE.Shader;
            equirect: THREE.Shader;
            distanceRGBA: THREE.Shader;
            shadow: THREE.Shader;
            physical: THREE.Shader;
        }>, Events<{
            [name: string]: THREE.Shader;
            basic: THREE.Shader;
            lambert: THREE.Shader;
            phong: THREE.Shader;
            standard: THREE.Shader;
            matcap: THREE.Shader;
            points: THREE.Shader;
            dashed: THREE.Shader;
            depth: THREE.Shader;
            normal: THREE.Shader;
            sprite: THREE.Shader;
            background: THREE.Shader;
            cube: THREE.Shader;
            equirect: THREE.Shader;
            distanceRGBA: THREE.Shader;
            shadow: THREE.Shader;
            physical: THREE.Shader;
        }>, Slots<{
            [name: string]: THREE.Shader;
            basic: THREE.Shader;
            lambert: THREE.Shader;
            phong: THREE.Shader;
            standard: THREE.Shader;
            matcap: THREE.Shader;
            points: THREE.Shader;
            dashed: THREE.Shader;
            depth: THREE.Shader;
            normal: THREE.Shader;
            sprite: THREE.Shader;
            background: THREE.Shader;
            cube: THREE.Shader;
            equirect: THREE.Shader;
            distanceRGBA: THREE.Shader;
            shadow: THREE.Shader;
            physical: THREE.Shader;
        }>>;
    };
    readonly UniformsLib: {
        new (options: ComponentConstructorOptions<Props<{
            /**
             * Extends the default THREE namespace and allows using custom Three.js objects with `<T>`.
             *
             * @example
             * ```svelte
             * <script>
             * 	import { extend, T } from 'threlte'
             * 	import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
             *
             * 	extend({ OrbitControls })
             * </script>
             *
             * <T.OrbitControls />
             * ```
             */
            common: {
                diffuse: THREE.IUniform<THREE.Color>;
                opacity: THREE.IUniform<number>;
                map: THREE.IUniform<unknown>;
                mapTransform: THREE.IUniform<THREE.Matrix3>;
                alphaMap: THREE.IUniform<unknown>;
                alphaMapTransform: THREE.IUniform<THREE.Matrix3>;
                alphaTest: THREE.IUniform<number>;
            };
            specularmap: {
                specularMap: THREE.IUniform<unknown>;
                specularMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            envmap: {
                envMap: THREE.IUniform<unknown>;
                flipEnvMap: THREE.IUniform<number>;
                reflectivity: THREE.IUniform<number>;
                ior: THREE.IUniform<number>;
                refractRatio: THREE.IUniform<number>;
            };
            aomap: {
                aoMap: THREE.IUniform<unknown>;
                aoMapIntensity: THREE.IUniform<number>;
                aoMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            lightmap: {
                lightMap: THREE.IUniform<number>;
                lightMapIntensity: THREE.IUniform<number>;
                lightMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            bumpmap: {
                bumpMap: THREE.IUniform<unknown>;
                bumpMapTransform: THREE.IUniform<THREE.Matrix3>;
                bumpScale: THREE.IUniform<number>;
            };
            normalmap: {
                normalMap: THREE.IUniform<unknown>;
                normalMapTransform: THREE.IUniform<THREE.Matrix3>;
                normalScale: THREE.IUniform<THREE.Vector2>;
            };
            displacementmap: {
                displacementMap: THREE.IUniform<unknown>;
                displacementMapTransform: THREE.IUniform<THREE.Matrix3>;
                displacementScale: THREE.IUniform<number>;
                displacementBias: THREE.IUniform<number>;
            };
            emissivemap: {
                emissiveMap: THREE.IUniform<unknown>;
                emissiveMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            metalnessmap: {
                metalnessMap: THREE.IUniform<unknown>;
                metalnessMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            roughnessmap: {
                roughnessMap: THREE.IUniform<unknown>;
                roughnessMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            gradientmap: {
                gradientMap: THREE.IUniform<unknown>;
            };
            fog: {
                fogDensity: THREE.IUniform<number>;
                fogNear: THREE.IUniform<number>;
                fogFar: THREE.IUniform<number>;
                fogColor: THREE.IUniform<THREE.Color>;
            };
            lights: {
                ambientLightColor: THREE.IUniform<unknown[]>;
                lightProbe: THREE.IUniform<unknown[]>;
                directionalLights: {
                    value: unknown[];
                    properties: {
                        direction: {};
                        color: {};
                    };
                };
                directionalLightShadows: {
                    value: unknown[];
                    properties: {
                        shadowBias: {};
                        shadowNormalBias: {};
                        shadowRadius: {};
                        shadowMapSize: {};
                    };
                };
                directionalShadowMap: THREE.IUniform<unknown[]>;
                directionalShadowMatrix: THREE.IUniform<unknown[]>;
                spotLights: {
                    value: unknown[];
                    properties: {
                        color: {};
                        position: {};
                        direction: {};
                        distance: {};
                        coneCos: {};
                        penumbraCos: {};
                        decay: {};
                    };
                };
                spotLightShadows: {
                    value: unknown[];
                    properties: {
                        shadowBias: {};
                        shadowNormalBias: {};
                        shadowRadius: {};
                        shadowMapSize: {};
                    };
                };
                spotLightMap: THREE.IUniform<unknown[]>;
                spotShadowMap: THREE.IUniform<unknown[]>;
                spotLightMatrix: THREE.IUniform<unknown[]>;
                pointLights: {
                    value: unknown[];
                    properties: {
                        color: {};
                        position: {};
                        decay: {};
                        distance: {};
                    };
                };
                pointLightShadows: {
                    value: unknown[];
                    properties: {
                        shadowBias: {};
                        shadowNormalBias: {};
                        shadowRadius: {};
                        shadowMapSize: {};
                        shadowCameraNear: {};
                        shadowCameraFar: {};
                    };
                };
                pointShadowMap: THREE.IUniform<unknown[]>;
                pointShadowMatrix: THREE.IUniform<unknown[]>;
                hemisphereLights: {
                    value: unknown[];
                    properties: {
                        direction: {};
                        skycolor: {};
                        groundColor: {};
                    };
                };
                rectAreaLights: {
                    value: unknown[];
                    properties: {
                        color: {};
                        position: {};
                        width: {};
                        height: {};
                    };
                };
                ltc_1: THREE.IUniform<unknown>;
                ltc_2: THREE.IUniform<unknown>;
            };
            points: {
                diffuse: THREE.IUniform<THREE.Color>;
                opacity: THREE.IUniform<number>;
                size: THREE.IUniform<number>;
                scale: THREE.IUniform<number>;
                map: THREE.IUniform<unknown>;
                alphaMap: THREE.IUniform<unknown>;
                alphaTest: THREE.IUniform<number>;
                uvTransform: THREE.IUniform<THREE.Matrix3>;
            };
            sprite: {
                diffuse: THREE.IUniform<THREE.Color>;
                opacity: THREE.IUniform<number>;
                center: THREE.IUniform<THREE.Vector2>;
                rotation: THREE.IUniform<number>;
                map: THREE.IUniform<unknown>;
                mapTransform: THREE.IUniform<THREE.Matrix3>;
                alphaMap: THREE.IUniform<unknown>;
                alphaTest: THREE.IUniform<number>;
            };
        }>>): SvelteComponent<Props<{
            /**
             * Extends the default THREE namespace and allows using custom Three.js objects with `<T>`.
             *
             * @example
             * ```svelte
             * <script>
             * 	import { extend, T } from 'threlte'
             * 	import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
             *
             * 	extend({ OrbitControls })
             * </script>
             *
             * <T.OrbitControls />
             * ```
             */
            common: {
                diffuse: THREE.IUniform<THREE.Color>;
                opacity: THREE.IUniform<number>;
                map: THREE.IUniform<unknown>;
                mapTransform: THREE.IUniform<THREE.Matrix3>;
                alphaMap: THREE.IUniform<unknown>;
                alphaMapTransform: THREE.IUniform<THREE.Matrix3>;
                alphaTest: THREE.IUniform<number>;
            };
            specularmap: {
                specularMap: THREE.IUniform<unknown>;
                specularMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            envmap: {
                envMap: THREE.IUniform<unknown>;
                flipEnvMap: THREE.IUniform<number>;
                reflectivity: THREE.IUniform<number>;
                ior: THREE.IUniform<number>;
                refractRatio: THREE.IUniform<number>;
            };
            aomap: {
                aoMap: THREE.IUniform<unknown>;
                aoMapIntensity: THREE.IUniform<number>;
                aoMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            lightmap: {
                lightMap: THREE.IUniform<number>;
                lightMapIntensity: THREE.IUniform<number>;
                lightMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            bumpmap: {
                bumpMap: THREE.IUniform<unknown>;
                bumpMapTransform: THREE.IUniform<THREE.Matrix3>;
                bumpScale: THREE.IUniform<number>;
            };
            normalmap: {
                normalMap: THREE.IUniform<unknown>;
                normalMapTransform: THREE.IUniform<THREE.Matrix3>;
                normalScale: THREE.IUniform<THREE.Vector2>;
            };
            displacementmap: {
                displacementMap: THREE.IUniform<unknown>;
                displacementMapTransform: THREE.IUniform<THREE.Matrix3>;
                displacementScale: THREE.IUniform<number>;
                displacementBias: THREE.IUniform<number>;
            };
            emissivemap: {
                emissiveMap: THREE.IUniform<unknown>;
                emissiveMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            metalnessmap: {
                metalnessMap: THREE.IUniform<unknown>;
                metalnessMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            roughnessmap: {
                roughnessMap: THREE.IUniform<unknown>;
                roughnessMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            gradientmap: {
                gradientMap: THREE.IUniform<unknown>;
            };
            fog: {
                fogDensity: THREE.IUniform<number>;
                fogNear: THREE.IUniform<number>;
                fogFar: THREE.IUniform<number>;
                fogColor: THREE.IUniform<THREE.Color>;
            };
            lights: {
                ambientLightColor: THREE.IUniform<unknown[]>;
                lightProbe: THREE.IUniform<unknown[]>;
                directionalLights: {
                    value: unknown[];
                    properties: {
                        direction: {};
                        color: {};
                    };
                };
                directionalLightShadows: {
                    value: unknown[];
                    properties: {
                        shadowBias: {};
                        shadowNormalBias: {};
                        shadowRadius: {};
                        shadowMapSize: {};
                    };
                };
                directionalShadowMap: THREE.IUniform<unknown[]>;
                directionalShadowMatrix: THREE.IUniform<unknown[]>;
                spotLights: {
                    value: unknown[];
                    properties: {
                        color: {};
                        position: {};
                        direction: {};
                        distance: {};
                        coneCos: {};
                        penumbraCos: {};
                        decay: {};
                    };
                };
                spotLightShadows: {
                    value: unknown[];
                    properties: {
                        shadowBias: {};
                        shadowNormalBias: {};
                        shadowRadius: {};
                        shadowMapSize: {};
                    };
                };
                spotLightMap: THREE.IUniform<unknown[]>;
                spotShadowMap: THREE.IUniform<unknown[]>;
                spotLightMatrix: THREE.IUniform<unknown[]>;
                pointLights: {
                    value: unknown[];
                    properties: {
                        color: {};
                        position: {};
                        decay: {};
                        distance: {};
                    };
                };
                pointLightShadows: {
                    value: unknown[];
                    properties: {
                        shadowBias: {};
                        shadowNormalBias: {};
                        shadowRadius: {};
                        shadowMapSize: {};
                        shadowCameraNear: {};
                        shadowCameraFar: {};
                    };
                };
                pointShadowMap: THREE.IUniform<unknown[]>;
                pointShadowMatrix: THREE.IUniform<unknown[]>;
                hemisphereLights: {
                    value: unknown[];
                    properties: {
                        direction: {};
                        skycolor: {};
                        groundColor: {};
                    };
                };
                rectAreaLights: {
                    value: unknown[];
                    properties: {
                        color: {};
                        position: {};
                        width: {};
                        height: {};
                    };
                };
                ltc_1: THREE.IUniform<unknown>;
                ltc_2: THREE.IUniform<unknown>;
            };
            points: {
                diffuse: THREE.IUniform<THREE.Color>;
                opacity: THREE.IUniform<number>;
                size: THREE.IUniform<number>;
                scale: THREE.IUniform<number>;
                map: THREE.IUniform<unknown>;
                alphaMap: THREE.IUniform<unknown>;
                alphaTest: THREE.IUniform<number>;
                uvTransform: THREE.IUniform<THREE.Matrix3>;
            };
            sprite: {
                diffuse: THREE.IUniform<THREE.Color>;
                opacity: THREE.IUniform<number>;
                center: THREE.IUniform<THREE.Vector2>;
                rotation: THREE.IUniform<number>;
                map: THREE.IUniform<unknown>;
                mapTransform: THREE.IUniform<THREE.Matrix3>;
                alphaMap: THREE.IUniform<unknown>;
                alphaTest: THREE.IUniform<number>;
            };
        }>, Events<{
            /**
             * Extends the default THREE namespace and allows using custom Three.js objects with `<T>`.
             *
             * @example
             * ```svelte
             * <script>
             * 	import { extend, T } from 'threlte'
             * 	import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
             *
             * 	extend({ OrbitControls })
             * </script>
             *
             * <T.OrbitControls />
             * ```
             */
            common: {
                diffuse: THREE.IUniform<THREE.Color>;
                opacity: THREE.IUniform<number>;
                map: THREE.IUniform<unknown>;
                mapTransform: THREE.IUniform<THREE.Matrix3>;
                alphaMap: THREE.IUniform<unknown>;
                alphaMapTransform: THREE.IUniform<THREE.Matrix3>;
                alphaTest: THREE.IUniform<number>;
            };
            specularmap: {
                specularMap: THREE.IUniform<unknown>;
                specularMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            envmap: {
                envMap: THREE.IUniform<unknown>;
                flipEnvMap: THREE.IUniform<number>;
                reflectivity: THREE.IUniform<number>;
                ior: THREE.IUniform<number>;
                refractRatio: THREE.IUniform<number>;
            };
            aomap: {
                aoMap: THREE.IUniform<unknown>;
                aoMapIntensity: THREE.IUniform<number>;
                aoMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            lightmap: {
                lightMap: THREE.IUniform<number>;
                lightMapIntensity: THREE.IUniform<number>;
                lightMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            bumpmap: {
                bumpMap: THREE.IUniform<unknown>;
                bumpMapTransform: THREE.IUniform<THREE.Matrix3>;
                bumpScale: THREE.IUniform<number>;
            };
            normalmap: {
                normalMap: THREE.IUniform<unknown>;
                normalMapTransform: THREE.IUniform<THREE.Matrix3>;
                normalScale: THREE.IUniform<THREE.Vector2>;
            };
            displacementmap: {
                displacementMap: THREE.IUniform<unknown>;
                displacementMapTransform: THREE.IUniform<THREE.Matrix3>;
                displacementScale: THREE.IUniform<number>;
                displacementBias: THREE.IUniform<number>;
            };
            emissivemap: {
                emissiveMap: THREE.IUniform<unknown>;
                emissiveMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            metalnessmap: {
                metalnessMap: THREE.IUniform<unknown>;
                metalnessMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            roughnessmap: {
                roughnessMap: THREE.IUniform<unknown>;
                roughnessMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            gradientmap: {
                gradientMap: THREE.IUniform<unknown>;
            };
            fog: {
                fogDensity: THREE.IUniform<number>;
                fogNear: THREE.IUniform<number>;
                fogFar: THREE.IUniform<number>;
                fogColor: THREE.IUniform<THREE.Color>;
            };
            lights: {
                ambientLightColor: THREE.IUniform<unknown[]>;
                lightProbe: THREE.IUniform<unknown[]>;
                directionalLights: {
                    value: unknown[];
                    properties: {
                        direction: {};
                        color: {};
                    };
                };
                directionalLightShadows: {
                    value: unknown[];
                    properties: {
                        shadowBias: {};
                        shadowNormalBias: {};
                        shadowRadius: {};
                        shadowMapSize: {};
                    };
                };
                directionalShadowMap: THREE.IUniform<unknown[]>;
                directionalShadowMatrix: THREE.IUniform<unknown[]>;
                spotLights: {
                    value: unknown[];
                    properties: {
                        color: {};
                        position: {};
                        direction: {};
                        distance: {};
                        coneCos: {};
                        penumbraCos: {};
                        decay: {};
                    };
                };
                spotLightShadows: {
                    value: unknown[];
                    properties: {
                        shadowBias: {};
                        shadowNormalBias: {};
                        shadowRadius: {};
                        shadowMapSize: {};
                    };
                };
                spotLightMap: THREE.IUniform<unknown[]>;
                spotShadowMap: THREE.IUniform<unknown[]>;
                spotLightMatrix: THREE.IUniform<unknown[]>;
                pointLights: {
                    value: unknown[];
                    properties: {
                        color: {};
                        position: {};
                        decay: {};
                        distance: {};
                    };
                };
                pointLightShadows: {
                    value: unknown[];
                    properties: {
                        shadowBias: {};
                        shadowNormalBias: {};
                        shadowRadius: {};
                        shadowMapSize: {};
                        shadowCameraNear: {};
                        shadowCameraFar: {};
                    };
                };
                pointShadowMap: THREE.IUniform<unknown[]>;
                pointShadowMatrix: THREE.IUniform<unknown[]>;
                hemisphereLights: {
                    value: unknown[];
                    properties: {
                        direction: {};
                        skycolor: {};
                        groundColor: {};
                    };
                };
                rectAreaLights: {
                    value: unknown[];
                    properties: {
                        color: {};
                        position: {};
                        width: {};
                        height: {};
                    };
                };
                ltc_1: THREE.IUniform<unknown>;
                ltc_2: THREE.IUniform<unknown>;
            };
            points: {
                diffuse: THREE.IUniform<THREE.Color>;
                opacity: THREE.IUniform<number>;
                size: THREE.IUniform<number>;
                scale: THREE.IUniform<number>;
                map: THREE.IUniform<unknown>;
                alphaMap: THREE.IUniform<unknown>;
                alphaTest: THREE.IUniform<number>;
                uvTransform: THREE.IUniform<THREE.Matrix3>;
            };
            sprite: {
                diffuse: THREE.IUniform<THREE.Color>;
                opacity: THREE.IUniform<number>;
                center: THREE.IUniform<THREE.Vector2>;
                rotation: THREE.IUniform<number>;
                map: THREE.IUniform<unknown>;
                mapTransform: THREE.IUniform<THREE.Matrix3>;
                alphaMap: THREE.IUniform<unknown>;
                alphaTest: THREE.IUniform<number>;
            };
        }>, Slots<{
            /**
             * Extends the default THREE namespace and allows using custom Three.js objects with `<T>`.
             *
             * @example
             * ```svelte
             * <script>
             * 	import { extend, T } from 'threlte'
             * 	import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
             *
             * 	extend({ OrbitControls })
             * </script>
             *
             * <T.OrbitControls />
             * ```
             */
            common: {
                diffuse: THREE.IUniform<THREE.Color>;
                opacity: THREE.IUniform<number>;
                map: THREE.IUniform<unknown>;
                mapTransform: THREE.IUniform<THREE.Matrix3>;
                alphaMap: THREE.IUniform<unknown>;
                alphaMapTransform: THREE.IUniform<THREE.Matrix3>;
                alphaTest: THREE.IUniform<number>;
            };
            specularmap: {
                specularMap: THREE.IUniform<unknown>;
                specularMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            envmap: {
                envMap: THREE.IUniform<unknown>;
                flipEnvMap: THREE.IUniform<number>;
                reflectivity: THREE.IUniform<number>;
                ior: THREE.IUniform<number>;
                refractRatio: THREE.IUniform<number>;
            };
            aomap: {
                aoMap: THREE.IUniform<unknown>;
                aoMapIntensity: THREE.IUniform<number>;
                aoMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            lightmap: {
                lightMap: THREE.IUniform<number>;
                lightMapIntensity: THREE.IUniform<number>;
                lightMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            bumpmap: {
                bumpMap: THREE.IUniform<unknown>;
                bumpMapTransform: THREE.IUniform<THREE.Matrix3>;
                bumpScale: THREE.IUniform<number>;
            };
            normalmap: {
                normalMap: THREE.IUniform<unknown>;
                normalMapTransform: THREE.IUniform<THREE.Matrix3>;
                normalScale: THREE.IUniform<THREE.Vector2>;
            };
            displacementmap: {
                displacementMap: THREE.IUniform<unknown>;
                displacementMapTransform: THREE.IUniform<THREE.Matrix3>;
                displacementScale: THREE.IUniform<number>;
                displacementBias: THREE.IUniform<number>;
            };
            emissivemap: {
                emissiveMap: THREE.IUniform<unknown>;
                emissiveMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            metalnessmap: {
                metalnessMap: THREE.IUniform<unknown>;
                metalnessMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            roughnessmap: {
                roughnessMap: THREE.IUniform<unknown>;
                roughnessMapTransform: THREE.IUniform<THREE.Matrix3>;
            };
            gradientmap: {
                gradientMap: THREE.IUniform<unknown>;
            };
            fog: {
                fogDensity: THREE.IUniform<number>;
                fogNear: THREE.IUniform<number>;
                fogFar: THREE.IUniform<number>;
                fogColor: THREE.IUniform<THREE.Color>;
            };
            lights: {
                ambientLightColor: THREE.IUniform<unknown[]>;
                lightProbe: THREE.IUniform<unknown[]>;
                directionalLights: {
                    value: unknown[];
                    properties: {
                        direction: {};
                        color: {};
                    };
                };
                directionalLightShadows: {
                    value: unknown[];
                    properties: {
                        shadowBias: {};
                        shadowNormalBias: {};
                        shadowRadius: {};
                        shadowMapSize: {};
                    };
                };
                directionalShadowMap: THREE.IUniform<unknown[]>;
                directionalShadowMatrix: THREE.IUniform<unknown[]>;
                spotLights: {
                    value: unknown[];
                    properties: {
                        color: {};
                        position: {};
                        direction: {};
                        distance: {};
                        coneCos: {};
                        penumbraCos: {};
                        decay: {};
                    };
                };
                spotLightShadows: {
                    value: unknown[];
                    properties: {
                        shadowBias: {};
                        shadowNormalBias: {};
                        shadowRadius: {};
                        shadowMapSize: {};
                    };
                };
                spotLightMap: THREE.IUniform<unknown[]>;
                spotShadowMap: THREE.IUniform<unknown[]>;
                spotLightMatrix: THREE.IUniform<unknown[]>;
                pointLights: {
                    value: unknown[];
                    properties: {
                        color: {};
                        position: {};
                        decay: {};
                        distance: {};
                    };
                };
                pointLightShadows: {
                    value: unknown[];
                    properties: {
                        shadowBias: {};
                        shadowNormalBias: {};
                        shadowRadius: {};
                        shadowMapSize: {};
                        shadowCameraNear: {};
                        shadowCameraFar: {};
                    };
                };
                pointShadowMap: THREE.IUniform<unknown[]>;
                pointShadowMatrix: THREE.IUniform<unknown[]>;
                hemisphereLights: {
                    value: unknown[];
                    properties: {
                        direction: {};
                        skycolor: {};
                        groundColor: {};
                    };
                };
                rectAreaLights: {
                    value: unknown[];
                    properties: {
                        color: {};
                        position: {};
                        width: {};
                        height: {};
                    };
                };
                ltc_1: THREE.IUniform<unknown>;
                ltc_2: THREE.IUniform<unknown>;
            };
            points: {
                diffuse: THREE.IUniform<THREE.Color>;
                opacity: THREE.IUniform<number>;
                size: THREE.IUniform<number>;
                scale: THREE.IUniform<number>;
                map: THREE.IUniform<unknown>;
                alphaMap: THREE.IUniform<unknown>;
                alphaTest: THREE.IUniform<number>;
                uvTransform: THREE.IUniform<THREE.Matrix3>;
            };
            sprite: {
                diffuse: THREE.IUniform<THREE.Color>;
                opacity: THREE.IUniform<number>;
                center: THREE.IUniform<THREE.Vector2>;
                rotation: THREE.IUniform<number>;
                map: THREE.IUniform<unknown>;
                mapTransform: THREE.IUniform<THREE.Matrix3>;
                alphaMap: THREE.IUniform<unknown>;
                alphaTest: THREE.IUniform<number>;
            };
        }>>;
    };
    cloneUniforms: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.cloneUniforms>>): SvelteComponent<Props<typeof THREE.cloneUniforms>, Events<typeof THREE.cloneUniforms>, Slots<typeof THREE.cloneUniforms>>;
    };
    mergeUniforms: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.mergeUniforms>>): SvelteComponent<Props<typeof THREE.mergeUniforms>, Events<typeof THREE.mergeUniforms>, Slots<typeof THREE.mergeUniforms>>;
    };
    cloneUniformsGroups: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.cloneUniformsGroups>>): SvelteComponent<Props<typeof THREE.cloneUniformsGroups>, Events<typeof THREE.cloneUniformsGroups>, Slots<typeof THREE.cloneUniformsGroups>>;
    };
    UniformsUtils: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.UniformsUtils>>): SvelteComponent<Props<typeof THREE.UniformsUtils>, Events<typeof THREE.UniformsUtils>, Slots<typeof THREE.UniformsUtils>>;
    };
    readonly ShaderChunk: {
        new (options: ComponentConstructorOptions<Props<{
            alphahash_fragment: string;
            alphahash_pars_fragment: string;
            alphamap_fragment: string;
            alphamap_pars_fragment: string;
            alphatest_fragment: string;
            alphatest_pars_fragment: string;
            aomap_fragment: string;
            aomap_pars_fragment: string;
            begin_vertex: string;
            beginnormal_vertex: string;
            bsdfs: string;
            iridescence_fragment: string;
            bumpmap_pars_fragment: string;
            clipping_planes_fragment: string;
            clipping_planes_pars_fragment: string;
            clipping_planes_pars_vertex: string;
            clipping_planes_vertex: string;
            color_fragment: string;
            color_pars_fragment: string;
            color_pars_vertex: string;
            color_vertex: string;
            common: string;
            cube_uv_reflection_fragment: string;
            defaultnormal_vertex: string;
            displacementmap_pars_vertex: string;
            displacementmap_vertex: string;
            emissivemap_fragment: string;
            emissivemap_pars_fragment: string;
            colorspace_fragment: string;
            colorspace_pars_fragment: string;
            envmap_fragment: string;
            envmap_common_pars_fragment: string;
            envmap_pars_fragment: string;
            envmap_pars_vertex: string;
            envmap_physical_pars_fragment: string;
            envmap_vertex: string;
            fog_vertex: string;
            fog_pars_vertex: string;
            fog_fragment: string;
            fog_pars_fragment: string;
            gradientmap_pars_fragment: string;
            lightmap_fragment: string;
            lightmap_pars_fragment: string;
            lights_lambert_fragment: string;
            lights_lambert_pars_fragment: string;
            lights_pars_begin: string;
            lights_toon_fragment: string;
            lights_toon_pars_fragment: string;
            lights_phong_fragment: string;
            lights_phong_pars_fragment: string;
            lights_physical_fragment: string;
            lights_physical_pars_fragment: string;
            lights_fragment_begin: string;
            lights_fragment_maps: string;
            lights_fragment_end: string;
            logdepthbuf_fragment: string;
            logdepthbuf_pars_fragment: string;
            logdepthbuf_pars_vertex: string;
            logdepthbuf_vertex: string;
            map_fragment: string;
            map_pars_fragment: string;
            map_particle_fragment: string;
            map_particle_pars_fragment: string;
            metalnessmap_fragment: string;
            metalnessmap_pars_fragment: string;
            morphcolor_vertex: string;
            morphnormal_vertex: string;
            morphtarget_pars_vertex: string;
            morphtarget_vertex: string;
            normal_fragment_begin: string;
            normal_fragment_maps: string;
            normal_pars_fragment: string;
            normal_pars_vertex: string;
            normal_vertex: string;
            normalmap_pars_fragment: string;
            clearcoat_normal_fragment_begin: string;
            clearcoat_normal_fragment_maps: string;
            clearcoat_pars_fragment: string;
            iridescence_pars_fragment: string;
            opaque_fragment: string;
            packing: string;
            premultiplied_alpha_fragment: string;
            project_vertex: string;
            dithering_fragment: string;
            dithering_pars_fragment: string;
            roughnessmap_fragment: string;
            roughnessmap_pars_fragment: string;
            shadowmap_pars_fragment: string;
            shadowmap_pars_vertex: string;
            shadowmap_vertex: string;
            shadowmask_pars_fragment: string;
            skinbase_vertex: string;
            skinning_pars_vertex: string;
            skinning_vertex: string;
            skinnormal_vertex: string;
            specularmap_fragment: string;
            specularmap_pars_fragment: string;
            tonemapping_fragment: string;
            tonemapping_pars_fragment: string;
            transmission_fragment: string;
            transmission_pars_fragment: string;
            uv_pars_fragment: string;
            uv_pars_vertex: string;
            uv_vertex: string;
            worldpos_vertex: string;
            background_vert: string;
            background_frag: string;
            backgroundCube_vert: string;
            backgroundCube_frag: string;
            cube_vert: string;
            cube_frag: string;
            depth_vert: string;
            depth_frag: string;
            distanceRGBA_vert: string;
            distanceRGBA_frag: string;
            equirect_vert: string;
            equirect_frag: string;
            linedashed_vert: string;
            linedashed_frag: string;
            meshbasic_vert: string;
            meshbasic_frag: string;
            meshlambert_vert: string;
            meshlambert_frag: string;
            meshmatcap_vert: string;
            meshmatcap_frag: string;
            meshnormal_vert: string;
            meshnormal_frag: string;
            meshphong_vert: string;
            meshphong_frag: string;
            meshphysical_vert: string;
            meshphysical_frag: string;
            meshtoon_vert: string;
            meshtoon_frag: string;
            points_vert: string;
            points_frag: string;
            shadow_vert: string;
            shadow_frag: string;
            sprite_vert: string;
            sprite_frag: string;
        }>>): SvelteComponent<Props<{
            alphahash_fragment: string;
            alphahash_pars_fragment: string;
            alphamap_fragment: string;
            alphamap_pars_fragment: string;
            alphatest_fragment: string;
            alphatest_pars_fragment: string;
            aomap_fragment: string;
            aomap_pars_fragment: string;
            begin_vertex: string;
            beginnormal_vertex: string;
            bsdfs: string;
            iridescence_fragment: string;
            bumpmap_pars_fragment: string;
            clipping_planes_fragment: string;
            clipping_planes_pars_fragment: string;
            clipping_planes_pars_vertex: string;
            clipping_planes_vertex: string;
            color_fragment: string;
            color_pars_fragment: string;
            color_pars_vertex: string;
            color_vertex: string;
            common: string;
            cube_uv_reflection_fragment: string;
            defaultnormal_vertex: string;
            displacementmap_pars_vertex: string;
            displacementmap_vertex: string;
            emissivemap_fragment: string;
            emissivemap_pars_fragment: string;
            colorspace_fragment: string;
            colorspace_pars_fragment: string;
            envmap_fragment: string;
            envmap_common_pars_fragment: string;
            envmap_pars_fragment: string;
            envmap_pars_vertex: string;
            envmap_physical_pars_fragment: string;
            envmap_vertex: string;
            fog_vertex: string;
            fog_pars_vertex: string;
            fog_fragment: string;
            fog_pars_fragment: string;
            gradientmap_pars_fragment: string;
            lightmap_fragment: string;
            lightmap_pars_fragment: string;
            lights_lambert_fragment: string;
            lights_lambert_pars_fragment: string;
            lights_pars_begin: string;
            lights_toon_fragment: string;
            lights_toon_pars_fragment: string;
            lights_phong_fragment: string;
            lights_phong_pars_fragment: string;
            lights_physical_fragment: string;
            lights_physical_pars_fragment: string;
            lights_fragment_begin: string;
            lights_fragment_maps: string;
            lights_fragment_end: string;
            logdepthbuf_fragment: string;
            logdepthbuf_pars_fragment: string;
            logdepthbuf_pars_vertex: string;
            logdepthbuf_vertex: string;
            map_fragment: string;
            map_pars_fragment: string;
            map_particle_fragment: string;
            map_particle_pars_fragment: string;
            metalnessmap_fragment: string;
            metalnessmap_pars_fragment: string;
            morphcolor_vertex: string;
            morphnormal_vertex: string;
            morphtarget_pars_vertex: string;
            morphtarget_vertex: string;
            normal_fragment_begin: string;
            normal_fragment_maps: string;
            normal_pars_fragment: string;
            normal_pars_vertex: string;
            normal_vertex: string;
            normalmap_pars_fragment: string;
            clearcoat_normal_fragment_begin: string;
            clearcoat_normal_fragment_maps: string;
            clearcoat_pars_fragment: string;
            iridescence_pars_fragment: string;
            opaque_fragment: string;
            packing: string;
            premultiplied_alpha_fragment: string;
            project_vertex: string;
            dithering_fragment: string;
            dithering_pars_fragment: string;
            roughnessmap_fragment: string;
            roughnessmap_pars_fragment: string;
            shadowmap_pars_fragment: string;
            shadowmap_pars_vertex: string;
            shadowmap_vertex: string;
            shadowmask_pars_fragment: string;
            skinbase_vertex: string;
            skinning_pars_vertex: string;
            skinning_vertex: string;
            skinnormal_vertex: string;
            specularmap_fragment: string;
            specularmap_pars_fragment: string;
            tonemapping_fragment: string;
            tonemapping_pars_fragment: string;
            transmission_fragment: string;
            transmission_pars_fragment: string;
            uv_pars_fragment: string;
            uv_pars_vertex: string;
            uv_vertex: string;
            worldpos_vertex: string;
            background_vert: string;
            background_frag: string;
            backgroundCube_vert: string;
            backgroundCube_frag: string;
            cube_vert: string;
            cube_frag: string;
            depth_vert: string;
            depth_frag: string;
            distanceRGBA_vert: string;
            distanceRGBA_frag: string;
            equirect_vert: string;
            equirect_frag: string;
            linedashed_vert: string;
            linedashed_frag: string;
            meshbasic_vert: string;
            meshbasic_frag: string;
            meshlambert_vert: string;
            meshlambert_frag: string;
            meshmatcap_vert: string;
            meshmatcap_frag: string;
            meshnormal_vert: string;
            meshnormal_frag: string;
            meshphong_vert: string;
            meshphong_frag: string;
            meshphysical_vert: string;
            meshphysical_frag: string;
            meshtoon_vert: string;
            meshtoon_frag: string;
            points_vert: string;
            points_frag: string;
            shadow_vert: string;
            shadow_frag: string;
            sprite_vert: string;
            sprite_frag: string;
        }>, Events<{
            alphahash_fragment: string;
            alphahash_pars_fragment: string;
            alphamap_fragment: string;
            alphamap_pars_fragment: string;
            alphatest_fragment: string;
            alphatest_pars_fragment: string;
            aomap_fragment: string;
            aomap_pars_fragment: string;
            begin_vertex: string;
            beginnormal_vertex: string;
            bsdfs: string;
            iridescence_fragment: string;
            bumpmap_pars_fragment: string;
            clipping_planes_fragment: string;
            clipping_planes_pars_fragment: string;
            clipping_planes_pars_vertex: string;
            clipping_planes_vertex: string;
            color_fragment: string;
            color_pars_fragment: string;
            color_pars_vertex: string;
            color_vertex: string;
            common: string;
            cube_uv_reflection_fragment: string;
            defaultnormal_vertex: string;
            displacementmap_pars_vertex: string;
            displacementmap_vertex: string;
            emissivemap_fragment: string;
            emissivemap_pars_fragment: string;
            colorspace_fragment: string;
            colorspace_pars_fragment: string;
            envmap_fragment: string;
            envmap_common_pars_fragment: string;
            envmap_pars_fragment: string;
            envmap_pars_vertex: string;
            envmap_physical_pars_fragment: string;
            envmap_vertex: string;
            fog_vertex: string;
            fog_pars_vertex: string;
            fog_fragment: string;
            fog_pars_fragment: string;
            gradientmap_pars_fragment: string;
            lightmap_fragment: string;
            lightmap_pars_fragment: string;
            lights_lambert_fragment: string;
            lights_lambert_pars_fragment: string;
            lights_pars_begin: string;
            lights_toon_fragment: string;
            lights_toon_pars_fragment: string;
            lights_phong_fragment: string;
            lights_phong_pars_fragment: string;
            lights_physical_fragment: string;
            lights_physical_pars_fragment: string;
            lights_fragment_begin: string;
            lights_fragment_maps: string;
            lights_fragment_end: string;
            logdepthbuf_fragment: string;
            logdepthbuf_pars_fragment: string;
            logdepthbuf_pars_vertex: string;
            logdepthbuf_vertex: string;
            map_fragment: string;
            map_pars_fragment: string;
            map_particle_fragment: string;
            map_particle_pars_fragment: string;
            metalnessmap_fragment: string;
            metalnessmap_pars_fragment: string;
            morphcolor_vertex: string;
            morphnormal_vertex: string;
            morphtarget_pars_vertex: string;
            morphtarget_vertex: string;
            normal_fragment_begin: string;
            normal_fragment_maps: string;
            normal_pars_fragment: string;
            normal_pars_vertex: string;
            normal_vertex: string;
            normalmap_pars_fragment: string;
            clearcoat_normal_fragment_begin: string;
            clearcoat_normal_fragment_maps: string;
            clearcoat_pars_fragment: string;
            iridescence_pars_fragment: string;
            opaque_fragment: string;
            packing: string;
            premultiplied_alpha_fragment: string;
            project_vertex: string;
            dithering_fragment: string;
            dithering_pars_fragment: string;
            roughnessmap_fragment: string;
            roughnessmap_pars_fragment: string;
            shadowmap_pars_fragment: string;
            shadowmap_pars_vertex: string;
            shadowmap_vertex: string;
            shadowmask_pars_fragment: string;
            skinbase_vertex: string;
            skinning_pars_vertex: string;
            skinning_vertex: string;
            skinnormal_vertex: string;
            specularmap_fragment: string;
            specularmap_pars_fragment: string;
            tonemapping_fragment: string;
            tonemapping_pars_fragment: string;
            transmission_fragment: string;
            transmission_pars_fragment: string;
            uv_pars_fragment: string;
            uv_pars_vertex: string;
            uv_vertex: string;
            worldpos_vertex: string;
            background_vert: string;
            background_frag: string;
            backgroundCube_vert: string;
            backgroundCube_frag: string;
            cube_vert: string;
            cube_frag: string;
            depth_vert: string;
            depth_frag: string;
            distanceRGBA_vert: string;
            distanceRGBA_frag: string;
            equirect_vert: string;
            equirect_frag: string;
            linedashed_vert: string;
            linedashed_frag: string;
            meshbasic_vert: string;
            meshbasic_frag: string;
            meshlambert_vert: string;
            meshlambert_frag: string;
            meshmatcap_vert: string;
            meshmatcap_frag: string;
            meshnormal_vert: string;
            meshnormal_frag: string;
            meshphong_vert: string;
            meshphong_frag: string;
            meshphysical_vert: string;
            meshphysical_frag: string;
            meshtoon_vert: string;
            meshtoon_frag: string;
            points_vert: string;
            points_frag: string;
            shadow_vert: string;
            shadow_frag: string;
            sprite_vert: string;
            sprite_frag: string;
        }>, Slots<{
            alphahash_fragment: string;
            alphahash_pars_fragment: string;
            alphamap_fragment: string;
            alphamap_pars_fragment: string;
            alphatest_fragment: string;
            alphatest_pars_fragment: string;
            aomap_fragment: string;
            aomap_pars_fragment: string;
            begin_vertex: string;
            beginnormal_vertex: string;
            bsdfs: string;
            iridescence_fragment: string;
            bumpmap_pars_fragment: string;
            clipping_planes_fragment: string;
            clipping_planes_pars_fragment: string;
            clipping_planes_pars_vertex: string;
            clipping_planes_vertex: string;
            color_fragment: string;
            color_pars_fragment: string;
            color_pars_vertex: string;
            color_vertex: string;
            common: string;
            cube_uv_reflection_fragment: string;
            defaultnormal_vertex: string;
            displacementmap_pars_vertex: string;
            displacementmap_vertex: string;
            emissivemap_fragment: string;
            emissivemap_pars_fragment: string;
            colorspace_fragment: string;
            colorspace_pars_fragment: string;
            envmap_fragment: string;
            envmap_common_pars_fragment: string;
            envmap_pars_fragment: string;
            envmap_pars_vertex: string;
            envmap_physical_pars_fragment: string;
            envmap_vertex: string;
            fog_vertex: string;
            fog_pars_vertex: string;
            fog_fragment: string;
            fog_pars_fragment: string;
            gradientmap_pars_fragment: string;
            lightmap_fragment: string;
            lightmap_pars_fragment: string;
            lights_lambert_fragment: string;
            lights_lambert_pars_fragment: string;
            lights_pars_begin: string;
            lights_toon_fragment: string;
            lights_toon_pars_fragment: string;
            lights_phong_fragment: string;
            lights_phong_pars_fragment: string;
            lights_physical_fragment: string;
            lights_physical_pars_fragment: string;
            lights_fragment_begin: string;
            lights_fragment_maps: string;
            lights_fragment_end: string;
            logdepthbuf_fragment: string;
            logdepthbuf_pars_fragment: string;
            logdepthbuf_pars_vertex: string;
            logdepthbuf_vertex: string;
            map_fragment: string;
            map_pars_fragment: string;
            map_particle_fragment: string;
            map_particle_pars_fragment: string;
            metalnessmap_fragment: string;
            metalnessmap_pars_fragment: string;
            morphcolor_vertex: string;
            morphnormal_vertex: string;
            morphtarget_pars_vertex: string;
            morphtarget_vertex: string;
            normal_fragment_begin: string;
            normal_fragment_maps: string;
            normal_pars_fragment: string;
            normal_pars_vertex: string;
            normal_vertex: string;
            normalmap_pars_fragment: string;
            clearcoat_normal_fragment_begin: string;
            clearcoat_normal_fragment_maps: string;
            clearcoat_pars_fragment: string;
            iridescence_pars_fragment: string;
            opaque_fragment: string;
            packing: string;
            premultiplied_alpha_fragment: string;
            project_vertex: string;
            dithering_fragment: string;
            dithering_pars_fragment: string;
            roughnessmap_fragment: string;
            roughnessmap_pars_fragment: string;
            shadowmap_pars_fragment: string;
            shadowmap_pars_vertex: string;
            shadowmap_vertex: string;
            shadowmask_pars_fragment: string;
            skinbase_vertex: string;
            skinning_pars_vertex: string;
            skinning_vertex: string;
            skinnormal_vertex: string;
            specularmap_fragment: string;
            specularmap_pars_fragment: string;
            tonemapping_fragment: string;
            tonemapping_pars_fragment: string;
            transmission_fragment: string;
            transmission_pars_fragment: string;
            uv_pars_fragment: string;
            uv_pars_vertex: string;
            uv_vertex: string;
            worldpos_vertex: string;
            background_vert: string;
            background_frag: string;
            backgroundCube_vert: string;
            backgroundCube_frag: string;
            cube_vert: string;
            cube_frag: string;
            depth_vert: string;
            depth_frag: string;
            distanceRGBA_vert: string;
            distanceRGBA_frag: string;
            equirect_vert: string;
            equirect_frag: string;
            linedashed_vert: string;
            linedashed_frag: string;
            meshbasic_vert: string;
            meshbasic_frag: string;
            meshlambert_vert: string;
            meshlambert_frag: string;
            meshmatcap_vert: string;
            meshmatcap_frag: string;
            meshnormal_vert: string;
            meshnormal_frag: string;
            meshphong_vert: string;
            meshphong_frag: string;
            meshphysical_vert: string;
            meshphysical_frag: string;
            meshtoon_vert: string;
            meshtoon_frag: string;
            points_vert: string;
            points_frag: string;
            shadow_vert: string;
            shadow_frag: string;
            sprite_vert: string;
            sprite_frag: string;
        }>>;
    };
    WebGLBufferRenderer: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLBufferRenderer>>): SvelteComponent<Props<typeof THREE.WebGLBufferRenderer>, Events<typeof THREE.WebGLBufferRenderer>, Slots<typeof THREE.WebGLBufferRenderer>>;
    };
    WebGLCapabilities: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLCapabilities>>): SvelteComponent<Props<typeof THREE.WebGLCapabilities>, Events<typeof THREE.WebGLCapabilities>, Slots<typeof THREE.WebGLCapabilities>>;
    };
    WebGLClipping: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLClipping>>): SvelteComponent<Props<typeof THREE.WebGLClipping>, Events<typeof THREE.WebGLClipping>, Slots<typeof THREE.WebGLClipping>>;
    };
    WebGLCubeUVMaps: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLCubeUVMaps>>): SvelteComponent<Props<typeof THREE.WebGLCubeUVMaps>, Events<typeof THREE.WebGLCubeUVMaps>, Slots<typeof THREE.WebGLCubeUVMaps>>;
    };
    WebGLExtensions: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLExtensions>>): SvelteComponent<Props<typeof THREE.WebGLExtensions>, Events<typeof THREE.WebGLExtensions>, Slots<typeof THREE.WebGLExtensions>>;
    };
    WebGLGeometries: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLGeometries>>): SvelteComponent<Props<typeof THREE.WebGLGeometries>, Events<typeof THREE.WebGLGeometries>, Slots<typeof THREE.WebGLGeometries>>;
    };
    WebGLIndexedBufferRenderer: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLIndexedBufferRenderer>>): SvelteComponent<Props<typeof THREE.WebGLIndexedBufferRenderer>, Events<typeof THREE.WebGLIndexedBufferRenderer>, Slots<typeof THREE.WebGLIndexedBufferRenderer>>;
    };
    WebGLInfo: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLInfo>>): SvelteComponent<Props<typeof THREE.WebGLInfo>, Events<typeof THREE.WebGLInfo>, Slots<typeof THREE.WebGLInfo>>;
    };
    WebGLLights: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLLights>>): SvelteComponent<Props<typeof THREE.WebGLLights>, Events<typeof THREE.WebGLLights>, Slots<typeof THREE.WebGLLights>>;
    };
    WebGLObjects: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLObjects>>): SvelteComponent<Props<typeof THREE.WebGLObjects>, Events<typeof THREE.WebGLObjects>, Slots<typeof THREE.WebGLObjects>>;
    };
    WebGLProgram: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLProgram>>): SvelteComponent<Props<typeof THREE.WebGLProgram>, Events<typeof THREE.WebGLProgram>, Slots<typeof THREE.WebGLProgram>>;
    };
    WebGLPrograms: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLPrograms>>): SvelteComponent<Props<typeof THREE.WebGLPrograms>, Events<typeof THREE.WebGLPrograms>, Slots<typeof THREE.WebGLPrograms>>;
    };
    WebGLProperties: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLProperties>>): SvelteComponent<Props<typeof THREE.WebGLProperties>, Events<typeof THREE.WebGLProperties>, Slots<typeof THREE.WebGLProperties>>;
    };
    WebGLRenderList: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLRenderList>>): SvelteComponent<Props<typeof THREE.WebGLRenderList>, Events<typeof THREE.WebGLRenderList>, Slots<typeof THREE.WebGLRenderList>>;
    };
    WebGLRenderLists: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLRenderLists>>): SvelteComponent<Props<typeof THREE.WebGLRenderLists>, Events<typeof THREE.WebGLRenderLists>, Slots<typeof THREE.WebGLRenderLists>>;
    };
    WebGLShader: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLShader>>): SvelteComponent<Props<typeof THREE.WebGLShader>, Events<typeof THREE.WebGLShader>, Slots<typeof THREE.WebGLShader>>;
    };
    WebGLShadowMap: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLShadowMap>>): SvelteComponent<Props<typeof THREE.WebGLShadowMap>, Events<typeof THREE.WebGLShadowMap>, Slots<typeof THREE.WebGLShadowMap>>;
    };
    WebGLColorBuffer: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLColorBuffer>>): SvelteComponent<Props<typeof THREE.WebGLColorBuffer>, Events<typeof THREE.WebGLColorBuffer>, Slots<typeof THREE.WebGLColorBuffer>>;
    };
    WebGLDepthBuffer: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLDepthBuffer>>): SvelteComponent<Props<typeof THREE.WebGLDepthBuffer>, Events<typeof THREE.WebGLDepthBuffer>, Slots<typeof THREE.WebGLDepthBuffer>>;
    };
    WebGLStencilBuffer: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLStencilBuffer>>): SvelteComponent<Props<typeof THREE.WebGLStencilBuffer>, Events<typeof THREE.WebGLStencilBuffer>, Slots<typeof THREE.WebGLStencilBuffer>>;
    };
    WebGLState: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLState>>): SvelteComponent<Props<typeof THREE.WebGLState>, Events<typeof THREE.WebGLState>, Slots<typeof THREE.WebGLState>>;
    };
    WebGLTextures: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLTextures>>): SvelteComponent<Props<typeof THREE.WebGLTextures>, Events<typeof THREE.WebGLTextures>, Slots<typeof THREE.WebGLTextures>>;
    };
    WebGLUniforms: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLUniforms>>): SvelteComponent<Props<typeof THREE.WebGLUniforms>, Events<typeof THREE.WebGLUniforms>, Slots<typeof THREE.WebGLUniforms>>;
    };
    WebGLUniformsGroups: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebGLUniformsGroups>>): SvelteComponent<Props<typeof THREE.WebGLUniformsGroups>, Events<typeof THREE.WebGLUniformsGroups>, Slots<typeof THREE.WebGLUniformsGroups>>;
    };
    XRJointSpace: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.XRJointSpace>>): SvelteComponent<Props<typeof THREE.XRJointSpace>, Events<typeof THREE.XRJointSpace>, Slots<typeof THREE.XRJointSpace>>;
    };
    XRHandSpace: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.XRHandSpace>>): SvelteComponent<Props<typeof THREE.XRHandSpace>, Events<typeof THREE.XRHandSpace>, Slots<typeof THREE.XRHandSpace>>;
    };
    XRTargetRaySpace: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.XRTargetRaySpace>>): SvelteComponent<Props<typeof THREE.XRTargetRaySpace>, Events<typeof THREE.XRTargetRaySpace>, Slots<typeof THREE.XRTargetRaySpace>>;
    };
    XRGripSpace: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.XRGripSpace>>): SvelteComponent<Props<typeof THREE.XRGripSpace>, Events<typeof THREE.XRGripSpace>, Slots<typeof THREE.XRGripSpace>>;
    };
    WebXRController: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebXRController>>): SvelteComponent<Props<typeof THREE.WebXRController>, Events<typeof THREE.WebXRController>, Slots<typeof THREE.WebXRController>>;
    };
    WebXRManager: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.WebXRManager>>): SvelteComponent<Props<typeof THREE.WebXRManager>, Events<typeof THREE.WebXRManager>, Slots<typeof THREE.WebXRManager>>;
    };
    FogExp2: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.FogExp2>>): SvelteComponent<Props<typeof THREE.FogExp2>, Events<typeof THREE.FogExp2>, Slots<typeof THREE.FogExp2>>;
    };
    Fog: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Fog>>): SvelteComponent<Props<typeof THREE.Fog>, Events<typeof THREE.Fog>, Slots<typeof THREE.Fog>>;
    };
    Scene: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Scene>>): SvelteComponent<Props<typeof THREE.Scene>, Events<typeof THREE.Scene>, Slots<typeof THREE.Scene>>;
    };
    VideoTexture: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.VideoTexture>>): SvelteComponent<Props<typeof THREE.VideoTexture>, Events<typeof THREE.VideoTexture>, Slots<typeof THREE.VideoTexture>>;
    };
    CompressedArrayTexture: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CompressedArrayTexture>>): SvelteComponent<Props<typeof THREE.CompressedArrayTexture>, Events<typeof THREE.CompressedArrayTexture>, Slots<typeof THREE.CompressedArrayTexture>>;
    };
    DataTexture: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.DataTexture>>): SvelteComponent<Props<typeof THREE.DataTexture>, Events<typeof THREE.DataTexture>, Slots<typeof THREE.DataTexture>>;
    };
    CompressedTexture: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CompressedTexture>>): SvelteComponent<Props<typeof THREE.CompressedTexture>, Events<typeof THREE.CompressedTexture>, Slots<typeof THREE.CompressedTexture>>;
    };
    CubeTexture: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CubeTexture>>): SvelteComponent<Props<typeof THREE.CubeTexture>, Events<typeof THREE.CubeTexture>, Slots<typeof THREE.CubeTexture>>;
    };
    Data3DTexture: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Data3DTexture>>): SvelteComponent<Props<typeof THREE.Data3DTexture>, Events<typeof THREE.Data3DTexture>, Slots<typeof THREE.Data3DTexture>>;
    };
    DataArrayTexture: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.DataArrayTexture>>): SvelteComponent<Props<typeof THREE.DataArrayTexture>, Events<typeof THREE.DataArrayTexture>, Slots<typeof THREE.DataArrayTexture>>;
    };
    CanvasTexture: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.CanvasTexture>>): SvelteComponent<Props<typeof THREE.CanvasTexture>, Events<typeof THREE.CanvasTexture>, Slots<typeof THREE.CanvasTexture>>;
    };
    DepthTexture: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.DepthTexture>>): SvelteComponent<Props<typeof THREE.DepthTexture>, Events<typeof THREE.DepthTexture>, Slots<typeof THREE.DepthTexture>>;
    };
    FramebufferTexture: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.FramebufferTexture>>): SvelteComponent<Props<typeof THREE.FramebufferTexture>, Events<typeof THREE.FramebufferTexture>, Slots<typeof THREE.FramebufferTexture>>;
    };
    Source: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Source>>): SvelteComponent<Props<typeof THREE.Source>, Events<typeof THREE.Source>, Slots<typeof THREE.Source>>;
    };
    Texture: {
        new (options: ComponentConstructorOptions<Props<typeof THREE.Texture>>): SvelteComponent<Props<typeof THREE.Texture>, Events<typeof THREE.Texture>, Slots<typeof THREE.Texture>>;
    };
} & Record<string, typeof SvelteComponent>;
export {};
