import * as THREE from 'three';
import TComp from './T.svelte';
const catalogue = {};
/**
 * Extends the default THREE namespace and allows using custom Three.js objects with `<T>`.
 *
 * @example
 * ```svelte
 * <script>
 * 	import { extend, T } from 'threlte'
 * 	import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
 *
 * 	extend({ OrbitControls })
 * </script>
 *
 * <T.OrbitControls />
 * ```
 */
export const extend = (extensions) => {
    Object.assign(catalogue, extensions);
};
const augmentConstructorArgs = (args, is) => {
    const module = catalogue[is] || THREE[is];
    if (!module) {
        throw new Error(`No Three.js module found for ${is}. Did you forget to extend the catalogue?`);
    }
    return {
        ...args,
        props: {
            ...args.props,
            is: module
        }
    };
};
const proxyTConstructor = (is) => {
    return new Proxy(class {
    }, {
        construct(_, [args]) {
            const castedArgs = args;
            return new TComp(augmentConstructorArgs(castedArgs, is));
        }
    });
};
/**
 * ## `<T>`
 *
 * Threlte's `<T>` component is a wrapper around Three.js objects. It is a generic component that can be used to create any Three.js object.
 *
 * @example
 *
 * ```svelte
 * <script>
 * 	import { T } from 'threlte'
 * </script>
 *
 * <T.PerspectiveCamera makeDefault />
 *
 * <T.Mesh>
 * 	<T.BoxGeometry />
 * 	<T.MeshBasicMaterial color="red" />
 * </T.Mesh>
 * ```
 */
export const T = new Proxy(class {
}, {
    construct(_, [args]) {
        const castedArgs = args;
        return new TComp(castedArgs);
    },
    get(_, is) {
        return proxyTConstructor(is);
    }
});
