import { type Readable } from 'svelte/store';
import type { ThrelteContext } from '../lib/contexts';
export type ThrelteUseFrame = {
    stop: () => void;
    start: () => void;
    started: Readable<boolean>;
};
export type ThrelteUseFrameOptions = {
    autostart?: boolean;
    order?: number;
    /**
     * Optionally provide a message to use with the property
     * `debugFrameloop` of the `<Canvas>` component.
     */
    debugFrameloopMessage?: string;
    /**
     * If false, the frame handler will not automatically invalidate the frame.
     * This is useful if you want to manually invalidate the frame. Defaults to
     * true.
     */
    invalidate?: boolean;
};
export type ThrelteFrameHandler = {
    fn: (ctx: ThrelteContext, delta: number) => void;
    order?: number;
    debugFrameloopMessage?: string;
    invalidate: boolean;
};
/**
 * Adds a handler to threltes unified render loop.
 *
 * `start` and `stop` functions are returned and the options allow
 * setting the handler to not start automatically.
 *
 * Provide an order to have your framehandlers running in a specific order.
 * Handlers are ordered from low to high when executing.
 * @param {(ctx: ThrelteContext, delta: number) => void} fn callback function
 * @param {ThrelteUseFrameOptions} options options
 * @returns {ThrelteUseFrame}
 */
export declare const useFrame: (fn: (ctx: ThrelteContext, delta: number) => void, options?: ThrelteUseFrameOptions) => ThrelteUseFrame;
