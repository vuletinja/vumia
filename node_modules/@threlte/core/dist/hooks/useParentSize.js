import { onDestroy } from 'svelte';
import { writable } from 'svelte/store';
import { browser } from '../lib/browser';
export const useParentSize = () => {
    const parentSize = writable({ width: 0, height: 0 });
    if (!browser) {
        return {
            parentSize,
            parentSizeAction: () => {
                /* do nothing */
            }
        };
    }
    // Only observe childList changes of the parent
    const mutationOptions = { childList: true, subtree: false, attributes: false };
    let el;
    const observeParent = (parent) => {
        resizeObserver.disconnect();
        mutationObserver.disconnect();
        resizeObserver.observe(parent);
        mutationObserver.observe(parent, mutationOptions);
    };
    // The canvas should match the contentRect of its parent
    const resizeObserver = new ResizeObserver(([entry]) => {
        const { contentRect } = entry;
        parentSize.set({
            width: contentRect.width,
            height: contentRect.height
        });
    });
    // Use a mutation observer to detect reparenting
    const mutationObserver = new MutationObserver((mutationsList) => {
        for (const mutation of mutationsList) {
            for (const node of mutation.removedNodes) {
                if (el === node && el.parentElement) {
                    observeParent(el.parentElement);
                    return;
                }
            }
        }
    });
    const parentSizeAction = (node) => {
        el = node;
        if (!el.parentElement)
            return;
        observeParent(el.parentElement);
    };
    onDestroy(() => {
        resizeObserver.disconnect();
        mutationObserver.disconnect();
    });
    return {
        parentSize,
        parentSizeAction
    };
};
