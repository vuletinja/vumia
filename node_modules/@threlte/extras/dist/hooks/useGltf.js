import { useLoader, useThrelte } from '@threlte/core';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';
import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { KTX2Loader } from 'three/examples/jsm/loaders/KTX2Loader';
import { buildSceneGraph } from '../lib/buildSceneGraph';
let defaultDracoLoaderInstances = {};
export function useGltf(urlOrOptions, options) {
    const { renderer } = useThrelte();
    const opts = typeof urlOrOptions === 'string' ? options : urlOrOptions;
    const loader = useLoader(GLTFLoader, {
        extend(loader) {
            if (opts?.useDraco) {
                if (typeof opts.useDraco === 'string' || typeof opts.useDraco === 'boolean') {
                    // default draco
                    const path = typeof opts.useDraco === 'string'
                        ? opts.useDraco
                        : 'https://www.gstatic.com/draco/versioned/decoders/1.4.3/';
                    if (!defaultDracoLoaderInstances[path]) {
                        defaultDracoLoaderInstances[path] = new DRACOLoader().setDecoderPath(path);
                    }
                    loader.setDRACOLoader(defaultDracoLoaderInstances[path]);
                }
                else {
                    // user's draco
                    loader.setDRACOLoader(opts.useDraco);
                }
            }
            if (opts?.useMeshopt) {
                loader.setMeshoptDecoder(MeshoptDecoder);
            }
            if (opts?.ktxTranscoderPath) {
                const ktx2Loader = new KTX2Loader();
                ktx2Loader.setTranscoderPath(opts?.ktxTranscoderPath);
                ktx2Loader.detectSupport(renderer);
                loader.setKTX2Loader(ktx2Loader);
            }
        }
    });
    const load = (url) => {
        return loader.load(url, {
            transform(result) {
                return {
                    ...result,
                    ...buildSceneGraph(result.scene)
                };
            }
        });
    };
    const url = typeof urlOrOptions === 'string' ? urlOrOptions : undefined;
    if (url) {
        return load(url);
    }
    else {
        return {
            load
        };
    }
}
